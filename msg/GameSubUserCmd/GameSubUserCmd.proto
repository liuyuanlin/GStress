syntax = "proto2";

package GameSubUserCmd;

//import "MainCmd.proto";

//进入房间协议在lobby中，桌子上的功能交给SO做。
// 子命令码表
enum enSubCmdID
{
	GAME_SUB_CS_USER_LEAVE_ROOM_RQST		= 1;	//离开房间请求
	GAME_SUB_SC_USER_LEAVE_ROOM_RSP			= 2;	//离开房间响应
	
	GAME_SUB_CS_USER_SIT_DOWN_RQST			= 3;	//请求坐下请求
	GAME_SUB_SC_USER_SIT_DOWN_RSP			= 4;	//请求坐下响应
	
	GAME_SUB_CS_USER_SIT_UP_RQST			= 5;	//请求起立请求
	GAME_SUB_SC_USER_SIT_UP_RSP				= 6;	//请求起立响应
	

	GAME_SUB_CS_USER_CHANGE_TABLE_RQST		= 7;	//用户换桌请求
	GAME_SUB_SC_USER_CHANGE_TABLE_RSP		= 8;	//用户换桌响应
	
	
	GAME_SUB_SC_USER_ROOM_INFO_NOTIFY		= 9;	//房间信息通知
	GAME_SUB_SC_USER_ROOM_CFG_NOTIFY		= 10;	//房间配置通知       
	

	
	GAME_SUB_SC_USER_FRAME_ENTER		= 11;	//客户端资源加载完成，通知客户端桌子上下文信息。
		
	GAME_SUB_SC_USER_LEAVE_ROOM_NOTIFY			= 12;	//离开房间通知

	GAME_SUB_USER_CHG_COORDINATE_CS  = 13;//上行玩家坐标
	
	GAME_SUB_USER_CS_START_GAME  = 14;//玩家请求开始游戏（开始后开始匹配上桌）

	GAME_SUB_USER_SC_START_GAME		= 15;//用户请求开始游戏响应
	
	GAME_SUB_USER_SC_MATCH_RESULT_NOTIFY		= 16;	//比赛结果通知

	GAME_SUB_CS_STEP_OUT_ROOM_RQST		= 17;	//玩家请求暂离房间
	GAME_SUB_SC_STEP_OUT_ROOM_RSP		= 18;	//玩家请求暂离房间返回
	
	GAME_SUB_USER_SC_MATCH_RANK_NOTIFY = 19;//玩家比赛排名信息更新
	
}


//GAME_SUB_CS_STEP_OUT_ROOM_RQST				= 17;	//玩家请求暂离房间
message GAME_SUB_CS_STEP_OUT_ROOM_RQST_MSG
{
	required int32 RoomId = 1;                         //房间ID
}

//GAME_SUB_SC_USER_LEAVE_ROOM_RSP			= 18;	//玩家请求暂离房间返回
message GAME_SUB_SC_STEP_OUT_ROOM_RSP_MSG
{
	required int32 ResultCode = 1;                     //操作结果码(0:成功，1:失败)
	required int32 RoomId = 2;                         //房间ID
}

//GAME_SUB_CS_USER_LEAVE_ROOM_RQST				= 1;	//离开房间请求
message CSUserLeaveRoomRqst
{
	required int32 RoomId = 1;                         //房间ID
}

//GAME_SUB_SC_USER_LEAVE_ROOM_RSP			= 2;	//离开房间响应
message SCUserLeaveRoomRsp
{
	required int32 ResultCode = 1;                     //操作结果码(0:成功，1:失败)
	required int32 RoomId = 2;                         //房间ID
}


//GAME_SUB_CS_USER_SIT_DOWN_RQST			= 3;	//请求坐下请求
message CSUserSitDownRqst
{
	required int32 RoomId = 1;                         //房间ID
	required int32 TableId = 2;							//桌子id（普通金币场，改字段填0）
}

//GAME_SUB_SC_USER_SIT_DOWN_RSP			= 4;	//请求坐下响应
message CSUserSitDownRsp
{
	required int32 ResultCode = 1;                     //操作结果码(0:成功，1:失败)
	required int32 RoomId = 2; 
	required int32 KindId = 3;  						//kindID
	optional int32 TalbeId = 4;  
}


//GAME_SUB_CS_USER_SIT_UP_RQST			= 5;	//请求起立请求
message CSUserSitUpRqst
{
	required int32 RoomId = 1;                         //房间ID
	required int32 TableId = 2;							//桌子id（普通金币场，改字段填0）
}

//GAME_SUB_SC_USER_SIT_UP_RSP				= 6;	//请求起立响应
message CSUserSitUpRsp
{
	required int32 ResultCode = 1;                     //操作结果码(0:成功，1:失败)
	required int32 RoomId = 2;    
	optional int32 TalbeId = 3;  
}


//GAME_SUB_CS_USER_CHANGE_TABLE_RQST			= 7;	//用户换桌请求
message CSUserChangeTableRqst
{
	required int32 RoomId = 1;                         //房间ID
}

//GAME_SUB_SC_USER_CHANGE_TABLE_RSP		= 8;	//用户换桌响应
message CSUserChangeTableRsp
{
	required int32 ResultCode = 1;                     //操作结果码(0:成功，1:失败)
	required int32 RoomId = 2;
}

enum enRoomUserState
{
	RoomUserState_None		= 0;	//空状态
	RoomUserState_Waiting		= 1;	//等待状态
	RoomUserState_Matching		= 2;	//匹配中
	RoomUserState_Gaming		= 3;	//游戏中
	RoomUserState_GoldLess		= 4;	//金币不足
	RoomUserState_Wait_Gaming		= 5;	//等待比赛开始
}

enum enMatchUserState
{
	MatchUserState_None		= 0;	//空状态
	MatchUserState_Wait		= 1;	//等待开赛（每轮开赛前的等待状态）
	MatchUserState_Gaming   = 2;    //游戏中
	MatchUserState_End		= 3;	//比赛结束
}

//比赛信息
message MMatchInfo{
	required int32  mMatchTypeId   = 1;		   //比赛TypeID
	required int32  mMatchGameId  = 2;            //比赛场游戏ID
	required enMatchUserState mUserMatchState 	 = 3;		//用户比赛状态
	required int32  mCurRoundCount = 4; //当前轮数 
	required int32  mWaitMatchTime = 5; //等待下一轮开赛时间
	required uint32 mAllRoundCount = 6;//总轮数
	required uint32 mAllGameCount = 7;//总局数
}


	
//GAME_SUB_SC_USER_ROOM_INFO_NOTIFY		= 9;	//房间信息通知
message CSUserRoomInfoNotify
{
	required int32 RoomId = 1;					//房间ID
	required int32 KindId = 2;					//kindID
	optional int32 TalbeId = 3;					//桌子ID
	optional int32 ChairCount = 4;				//椅子ID
	optional int32 RemiandMatchTime = 5;		//剩余的匹配时间(单位秒)
	optional enRoomUserState UserState = 6;		//玩家房间状态
	optional MMatchInfo mUserMatchInfo = 7;		//用户比赛信息
	required int32 RoomType = 8;				//RoomType
	required int32 iBaseScore = 9;				//低分
	required int32 iMaxScore = 10;				//封顶值
	required int32 iServerRate = 11;			//服务费-桌费
	optional int64 iBackGold = 12;				//免输返还金币数量
	optional int32 iBackExpire = 13;			//免输返还金币过期时间,时间戳单位秒
	optional uint64 iGold = 14;					//玩家金币数量
	
	optional int64 iJPQTm = 15;					//记牌器结束时间,时间戳单位秒
	optional int32 iJPQCount = 16;				//记牌器数量
	optional int32 iSuperCard = 17;				//超级加倍卡数量
}


//GAME_SUB_SC_USER_ROOM_CFG_NOTIFY		= 10;	//房间配置通知
message CSUserRoomCfgNotify
{
	required int32 RoomId = 1;                         //房间ID
}

//GAME_SUB_SC_USER_FRAME_ENTER		= 11;	//客户端资源加载完成，通知客户端桌子上下文信息。
message CSUserFrameEnter
{
	required int32 RoomId = 1;                         //房间ID
}

//GAME_SUB_SC_USER_LEAVE_ROOM_NOTIFY			= 12;	//离开房间通知
message SCUserLeaveRoomNotify
{
	required int32 RoomId = 1;                         //房间ID
	required int32 TableId = 2;                         //桌子id
	required bool IsKick = 3;                         //是否是被强制提出房间
	optional string KickReason = 4;					  //提出原因
}


message DDZ_TotalRecord
{
	required int32 iMaxMutipler = 1; //最高赢
	required int32 iBoomCnt = 2;	//炸弹个数
	required int32 iWinTimes = 3; //输赢次数
	required int32 iSpringTimes = 4; //春天或者反春个数
}
message XZMMjUserOperateDetail{
	required uint32 mSeatId = 1; //座位id
    required uint32 mUserId = 2; //玩家id
	optional uint32 mZiMoCount = 3;   //自摸次数
	optional uint32 mJiePaoCount = 4;   //接炮次数
	optional uint32 mDianPaoCount = 5;   //点杠次数
	optional uint32 mAnGangCount = 6;   //暗杠次数
	optional uint32 mMingAndBuGangCount = 7;   //明杠和补杠次数
	optional uint32 mChaJiaoCount = 8;   //查叫次数
}

message YB_MMjUserOperateDetail{
	required uint32 mSeatId = 1; //座位idXZ
    required uint32 mUserId = 2; //玩家id
	optional uint32 mZiMoCount = 3;   //自摸次数
	optional uint32 mJiePaoCount = 4;   //接炮次数
	optional uint32 mDianPaoCount = 5;   //点杠次数
	optional uint32 mGangCount = 6;   //杠次数（明杠，暗杠，补杠）
	optional uint32 mPiaoCount = 7;   //飘的次数
	optional uint32 mChaJiaoCount = 8;   //查叫次数
}

//客户端不希望在战绩界面加载游戏的协议所以这里要拷贝一份游戏的detail过来
//note:要改消息名字
message XCPDK_MCardUserOperateDetail{
	required uint32 mSeatId = 1; //座位id
    required uint32 mUserId = 2; //玩家id
	optional uint32 mWinCount = 3;   //胜利次数
	optional uint32 mBanYaCount = 4;   //板鸭次数
	optional uint32 mBaoDanCount = 5;   //报单次数
}

message MPlayerInfo{
	required int32 	mUserID = 1;									//用户 ID
	required int32 	mAccid = 2 ;	        						//用户别名id，用于显示
	required string mNickName = 3;	             				    //昵称
	required string mFaceID = 4;									//头像索引	
	optional int32  mVipType = 5;									//vip类型
}
message MWinInfo{
	required int32 	mUserID = 1;									//用户 ID
	required int64 	mWinScore = 2 ;	        						//用户别名id，用于显示		
	optional bytes 	mGameDataDetail = 3;								//统计数据
}

message MGameInfo{
	repeated MWinInfo	mWinInfos = 1;	//玩家输赢记录
	optional string 	mGameVideotapeKey = 2; //游戏录像标记 
}
	
// 游戏记录
message MUserGameRecord
{
	required int32 mRoomId = 1;                         //房间ID
	required int32 mTableId = 2;                         //KindId
	required int32 mKindId = 3;                         //桌子id
	required int32 mClubId = 4;                         //俱乐部id
	required int32 mGameCurrencyType = 5;				//游戏货币类型（1:钻石，2：金币，3积分）
	required int64 mTableType = 6;						//桌子类型（0.成员房 1.好友房）
	repeated MPlayerInfo mUsers = 7;					//桌子上玩家基础信息
	repeated MGameInfo mGameInfos = 8;					//每局的游戏详情
	repeated MWinInfo mTotalWinInfos = 9;				//每个玩家的总输赢
	required int64 mRecordTime = 10;					//纪录时间
	optional MPlayerInfo mCreaterInfo = 11;				//桌子创建者信息
	optional int32 mPayRoomRateType = 12;				//桌子支付方式
}


message GAME_SUB_USER_CHG_COORDINATE_CS_BODY
{
	required int64 Lng = 1;
	required int64 Lat = 2;
}


//GAME_SUB_USER_CS_START_GAME  = 14;//玩家请求开始游戏（开始后开始匹配上桌）
message CSUserStartGame
{
	required int32 RoomId = 1;                         //房间ID
}

//GAME_SUB_USER_SC_START_GAME		= 15;//用户请求开始游戏响应
message SCUserStartGame
{
	required int32 ResultCode = 1;                     //操作结果码(0:成功，1:失败)
	required int32 RoomId = 2;
}

//GAME_SUB_USER_SC_MATCH_RESULT_NOTIFY		= 16;	//比赛结果通知
message SCUserMatchResultNotify
{
	required int32 mMatchRank = 1;		//比赛排名
	required int32 mMatchAwardId = 2;	//奖励ID（0表示没有获得奖励）
	required int32 mMatchTypeId = 3;	//比赛typeID
	optional bytes mParam = 4;			//其他信息,根据比赛类型不同,此处参数意义不一样,目前只有生存赛有意义
}

//生存赛特殊参数
message SMatchParamMsg
{
	required bool bWin = 1;	//输赢标志,true-赢 false-输
	required int32 iLifeNum = 2;//当前剩余生命(0表示已输完,不能再继续比赛,如果需要继续则需重新报名)
	required int32 iWinNum = 3;//当前赢的总次数
}

//GAME_SUB_USER_SC_MATCH_RANK_NOTIFY = 19;//玩家比赛排名信息更新
message SCUserMatchRankNotify
{
	required int32 mMatchRank = 1;		//比赛排名
	required int32 mMatchTypeId = 2;	//比赛typeID
	required int32 mMatchType = 3; //比赛类型 1淘汰赛 2 晋级赛
	optional int32 mRemainTable = 4;//还在比赛中的桌子
	optional int32 mCurRound = 5;//当前轮数
	optional int32 mCurStatus = 6;//当前状态 1.更新排名 2.晋级
}









	
	
	
	
	
	
	
	
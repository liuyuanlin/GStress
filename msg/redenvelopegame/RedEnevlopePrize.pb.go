// Code generated by protoc-gen-go. DO NOT EDIT.
// source: RedEnvelopePrize.proto

package redenvelopegame

import (
	context "context"
	fmt "fmt"
	tars "github.com/TarsCloud/TarsGo/tars"
	model "github.com/TarsCloud/TarsGo/tars/model"
	requestf "github.com/TarsCloud/TarsGo/tars/protocol/res/requestf"
	current "github.com/TarsCloud/TarsGo/tars/util/current"
	tools "github.com/TarsCloud/TarsGo/tars/util/tools"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//批次状态
type RedEnvelopeBatchStatus int32

const (
	RedEnvelopeBatchStatus_ALL      RedEnvelopeBatchStatus = 0
	RedEnvelopeBatchStatus_WAIT     RedEnvelopeBatchStatus = 1
	RedEnvelopeBatchStatus_PLAYING  RedEnvelopeBatchStatus = 2
	RedEnvelopeBatchStatus_GAMEOVER RedEnvelopeBatchStatus = 3
)

var RedEnvelopeBatchStatus_name = map[int32]string{
	0: "ALL",
	1: "WAIT",
	2: "PLAYING",
	3: "GAMEOVER",
}

var RedEnvelopeBatchStatus_value = map[string]int32{
	"ALL":      0,
	"WAIT":     1,
	"PLAYING":  2,
	"GAMEOVER": 3,
}

func (x RedEnvelopeBatchStatus) String() string {
	return proto.EnumName(RedEnvelopeBatchStatus_name, int32(x))
}

func (RedEnvelopeBatchStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_763c21ef7df7fb30, []int{0}
}

//红包奖品类型
type RedEnvelopeItemType int32

const (
	RedEnvelopeItemType_GET_ALL RedEnvelopeItemType = 0
	RedEnvelopeItemType_AVERAGE RedEnvelopeItemType = 1
	RedEnvelopeItemType_RANDOM  RedEnvelopeItemType = 2
	RedEnvelopeItemType_OBJECT  RedEnvelopeItemType = 3
	RedEnvelopeItemType_GROUP   RedEnvelopeItemType = 4
)

var RedEnvelopeItemType_name = map[int32]string{
	0: "GET_ALL",
	1: "AVERAGE",
	2: "RANDOM",
	3: "OBJECT",
	4: "GROUP",
}

var RedEnvelopeItemType_value = map[string]int32{
	"GET_ALL": 0,
	"AVERAGE": 1,
	"RANDOM":  2,
	"OBJECT":  3,
	"GROUP":   4,
}

func (x RedEnvelopeItemType) String() string {
	return proto.EnumName(RedEnvelopeItemType_name, int32(x))
}

func (RedEnvelopeItemType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_763c21ef7df7fb30, []int{1}
}

//实物红包奖品发放状态
type RedPrizeDeliveriedState int32

const (
	RedPrizeDeliveriedState_NOSEND RedPrizeDeliveriedState = 0
	RedPrizeDeliveriedState_SEND   RedPrizeDeliveriedState = 1
)

var RedPrizeDeliveriedState_name = map[int32]string{
	0: "NOSEND",
	1: "SEND",
}

var RedPrizeDeliveriedState_value = map[string]int32{
	"NOSEND": 0,
	"SEND":   1,
}

func (x RedPrizeDeliveriedState) String() string {
	return proto.EnumName(RedPrizeDeliveriedState_name, int32(x))
}

func (RedPrizeDeliveriedState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_763c21ef7df7fb30, []int{2}
}

//红包奖品批次
type PBRedEnvelopeBatch struct {
	Id                   int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	ActivityId           int64                  `protobuf:"varint,2,opt,name=ActivityId,proto3" json:"ActivityId,omitempty"`
	ProductId            int64                  `protobuf:"varint,3,opt,name=ProductId,proto3" json:"ProductId,omitempty"`
	SendTime             int64                  `protobuf:"varint,4,opt,name=SendTime,proto3" json:"SendTime,omitempty"`
	State                RedEnvelopeBatchStatus `protobuf:"varint,5,opt,name=State,proto3,enum=RedEnvelopeBatchStatus" json:"State,omitempty"`
	ActivityName         string                 `protobuf:"bytes,6,opt,name=ActivityName,proto3" json:"ActivityName,omitempty"`
	Organizer            string                 `protobuf:"bytes,7,opt,name=Organizer,proto3" json:"Organizer,omitempty"`
	Items                []*PBRedEnvelopeItem   `protobuf:"bytes,8,rep,name=Items,proto3" json:"Items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *PBRedEnvelopeBatch) Reset()         { *m = PBRedEnvelopeBatch{} }
func (m *PBRedEnvelopeBatch) String() string { return proto.CompactTextString(m) }
func (*PBRedEnvelopeBatch) ProtoMessage()    {}
func (*PBRedEnvelopeBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_763c21ef7df7fb30, []int{0}
}

func (m *PBRedEnvelopeBatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PBRedEnvelopeBatch.Unmarshal(m, b)
}
func (m *PBRedEnvelopeBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PBRedEnvelopeBatch.Marshal(b, m, deterministic)
}
func (m *PBRedEnvelopeBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PBRedEnvelopeBatch.Merge(m, src)
}
func (m *PBRedEnvelopeBatch) XXX_Size() int {
	return xxx_messageInfo_PBRedEnvelopeBatch.Size(m)
}
func (m *PBRedEnvelopeBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_PBRedEnvelopeBatch.DiscardUnknown(m)
}

var xxx_messageInfo_PBRedEnvelopeBatch proto.InternalMessageInfo

func (m *PBRedEnvelopeBatch) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PBRedEnvelopeBatch) GetActivityId() int64 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

func (m *PBRedEnvelopeBatch) GetProductId() int64 {
	if m != nil {
		return m.ProductId
	}
	return 0
}

func (m *PBRedEnvelopeBatch) GetSendTime() int64 {
	if m != nil {
		return m.SendTime
	}
	return 0
}

func (m *PBRedEnvelopeBatch) GetState() RedEnvelopeBatchStatus {
	if m != nil {
		return m.State
	}
	return RedEnvelopeBatchStatus_ALL
}

func (m *PBRedEnvelopeBatch) GetActivityName() string {
	if m != nil {
		return m.ActivityName
	}
	return ""
}

func (m *PBRedEnvelopeBatch) GetOrganizer() string {
	if m != nil {
		return m.Organizer
	}
	return ""
}

func (m *PBRedEnvelopeBatch) GetItems() []*PBRedEnvelopeItem {
	if m != nil {
		return m.Items
	}
	return nil
}

//红包奖品
type PBRedEnvelopeItem struct {
	Id                   int64               `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	ActivityId           int64               `protobuf:"varint,2,opt,name=ActivityId,proto3" json:"ActivityId,omitempty"`
	ProductId            int64               `protobuf:"varint,3,opt,name=ProductId,proto3" json:"ProductId,omitempty"`
	BatchId              int64               `protobuf:"varint,4,opt,name=BatchId,proto3" json:"BatchId,omitempty"`
	Type                 RedEnvelopeItemType `protobuf:"varint,5,opt,name=Type,proto3,enum=RedEnvelopeItemType" json:"Type,omitempty"`
	Count                int32               `protobuf:"varint,6,opt,name=Count,proto3" json:"Count,omitempty"`
	TotalMoney           int64               `protobuf:"varint,7,opt,name=TotalMoney,proto3" json:"TotalMoney,omitempty"`
	Chance               int32               `protobuf:"varint,8,opt,name=Chance,proto3" json:"Chance,omitempty"`
	PrizeName            string              `protobuf:"bytes,9,opt,name=PrizeName,proto3" json:"PrizeName,omitempty"`
	PrizeImgUrl          string              `protobuf:"bytes,10,opt,name=PrizeImgUrl,proto3" json:"PrizeImgUrl,omitempty"`
	WishText             string              `protobuf:"bytes,11,opt,name=WishText,proto3" json:"WishText,omitempty"`
	IsFilling            bool                `protobuf:"varint,12,opt,name=IsFilling,proto3" json:"IsFilling,omitempty"`
	DeliveriedMoney      int64               `protobuf:"varint,13,opt,name=DeliveriedMoney,proto3" json:"DeliveriedMoney,omitempty"`
	DeliveriedCount      int64               `protobuf:"varint,14,opt,name=DeliveriedCount,proto3" json:"DeliveriedCount,omitempty"`
	LevelName            string              `protobuf:"bytes,15,opt,name=LevelName,proto3" json:"LevelName,omitempty"`
	IsSpecialEffects     bool                `protobuf:"varint,16,opt,name=IsSpecialEffects,proto3" json:"IsSpecialEffects,omitempty"`
	PrizeDesc            string              `protobuf:"bytes,17,opt,name=PrizeDesc,proto3" json:"PrizeDesc,omitempty"`
	PerWinnerCount       int32               `protobuf:"varint,18,opt,name=PerWinnerCount,proto3" json:"PerWinnerCount,omitempty"`
	FixUsers             []*FixUser          `protobuf:"bytes,19,rep,name=FixUsers,proto3" json:"FixUsers,omitempty"`
	MinSortNum           int32               `protobuf:"varint,20,opt,name=MinSortNum,proto3" json:"MinSortNum,omitempty"`
	MaxSortNum           int32               `protobuf:"varint,21,opt,name=MaxSortNum,proto3" json:"MaxSortNum,omitempty"`
	RightNum             int32               `protobuf:"varint,22,opt,name=RightNum,proto3" json:"RightNum,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *PBRedEnvelopeItem) Reset()         { *m = PBRedEnvelopeItem{} }
func (m *PBRedEnvelopeItem) String() string { return proto.CompactTextString(m) }
func (*PBRedEnvelopeItem) ProtoMessage()    {}
func (*PBRedEnvelopeItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_763c21ef7df7fb30, []int{1}
}

func (m *PBRedEnvelopeItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PBRedEnvelopeItem.Unmarshal(m, b)
}
func (m *PBRedEnvelopeItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PBRedEnvelopeItem.Marshal(b, m, deterministic)
}
func (m *PBRedEnvelopeItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PBRedEnvelopeItem.Merge(m, src)
}
func (m *PBRedEnvelopeItem) XXX_Size() int {
	return xxx_messageInfo_PBRedEnvelopeItem.Size(m)
}
func (m *PBRedEnvelopeItem) XXX_DiscardUnknown() {
	xxx_messageInfo_PBRedEnvelopeItem.DiscardUnknown(m)
}

var xxx_messageInfo_PBRedEnvelopeItem proto.InternalMessageInfo

func (m *PBRedEnvelopeItem) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PBRedEnvelopeItem) GetActivityId() int64 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

func (m *PBRedEnvelopeItem) GetProductId() int64 {
	if m != nil {
		return m.ProductId
	}
	return 0
}

func (m *PBRedEnvelopeItem) GetBatchId() int64 {
	if m != nil {
		return m.BatchId
	}
	return 0
}

func (m *PBRedEnvelopeItem) GetType() RedEnvelopeItemType {
	if m != nil {
		return m.Type
	}
	return RedEnvelopeItemType_GET_ALL
}

func (m *PBRedEnvelopeItem) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *PBRedEnvelopeItem) GetTotalMoney() int64 {
	if m != nil {
		return m.TotalMoney
	}
	return 0
}

func (m *PBRedEnvelopeItem) GetChance() int32 {
	if m != nil {
		return m.Chance
	}
	return 0
}

func (m *PBRedEnvelopeItem) GetPrizeName() string {
	if m != nil {
		return m.PrizeName
	}
	return ""
}

func (m *PBRedEnvelopeItem) GetPrizeImgUrl() string {
	if m != nil {
		return m.PrizeImgUrl
	}
	return ""
}

func (m *PBRedEnvelopeItem) GetWishText() string {
	if m != nil {
		return m.WishText
	}
	return ""
}

func (m *PBRedEnvelopeItem) GetIsFilling() bool {
	if m != nil {
		return m.IsFilling
	}
	return false
}

func (m *PBRedEnvelopeItem) GetDeliveriedMoney() int64 {
	if m != nil {
		return m.DeliveriedMoney
	}
	return 0
}

func (m *PBRedEnvelopeItem) GetDeliveriedCount() int64 {
	if m != nil {
		return m.DeliveriedCount
	}
	return 0
}

func (m *PBRedEnvelopeItem) GetLevelName() string {
	if m != nil {
		return m.LevelName
	}
	return ""
}

func (m *PBRedEnvelopeItem) GetIsSpecialEffects() bool {
	if m != nil {
		return m.IsSpecialEffects
	}
	return false
}

func (m *PBRedEnvelopeItem) GetPrizeDesc() string {
	if m != nil {
		return m.PrizeDesc
	}
	return ""
}

func (m *PBRedEnvelopeItem) GetPerWinnerCount() int32 {
	if m != nil {
		return m.PerWinnerCount
	}
	return 0
}

func (m *PBRedEnvelopeItem) GetFixUsers() []*FixUser {
	if m != nil {
		return m.FixUsers
	}
	return nil
}

func (m *PBRedEnvelopeItem) GetMinSortNum() int32 {
	if m != nil {
		return m.MinSortNum
	}
	return 0
}

func (m *PBRedEnvelopeItem) GetMaxSortNum() int32 {
	if m != nil {
		return m.MaxSortNum
	}
	return 0
}

func (m *PBRedEnvelopeItem) GetRightNum() int32 {
	if m != nil {
		return m.RightNum
	}
	return 0
}

//具体的小红包奖品
type PBRedEnvelopeDetail struct {
	Id                   int64               `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	ActivityId           int64               `protobuf:"varint,2,opt,name=ActivityId,proto3" json:"ActivityId,omitempty"`
	ProductId            int64               `protobuf:"varint,3,opt,name=ProductId,proto3" json:"ProductId,omitempty"`
	BatchId              int64               `protobuf:"varint,4,opt,name=BatchId,proto3" json:"BatchId,omitempty"`
	ItemId               int64               `protobuf:"varint,5,opt,name=ItemId,proto3" json:"ItemId,omitempty"`
	Type                 RedEnvelopeItemType `protobuf:"varint,6,opt,name=Type,proto3,enum=RedEnvelopeItemType" json:"Type,omitempty"`
	WishText             string              `protobuf:"bytes,7,opt,name=WishText,proto3" json:"WishText,omitempty"`
	Money                int64               `protobuf:"varint,8,opt,name=Money,proto3" json:"Money,omitempty"`
	PrizeName            string              `protobuf:"bytes,9,opt,name=PrizeName,proto3" json:"PrizeName,omitempty"`
	IsDeliveried         bool                `protobuf:"varint,10,opt,name=IsDeliveried,proto3" json:"IsDeliveried,omitempty"`
	IsRecived            bool                `protobuf:"varint,11,opt,name=IsRecived,proto3" json:"IsRecived,omitempty"`
	LevelName            string              `protobuf:"bytes,12,opt,name=LevelName,proto3" json:"LevelName,omitempty"`
	IsSpecialEffects     bool                `protobuf:"varint,13,opt,name=IsSpecialEffects,proto3" json:"IsSpecialEffects,omitempty"`
	PrizeDesc            string              `protobuf:"bytes,14,opt,name=PrizeDesc,proto3" json:"PrizeDesc,omitempty"`
	PerWinnerCount       int32               `protobuf:"varint,18,opt,name=PerWinnerCount,proto3" json:"PerWinnerCount,omitempty"`
	IsFixed              bool                `protobuf:"varint,19,opt,name=IsFixed,proto3" json:"IsFixed,omitempty"`
	PrizeImgUrl          string              `protobuf:"bytes,20,opt,name=PrizeImgUrl,proto3" json:"PrizeImgUrl,omitempty"`
	MinSortNum           int32               `protobuf:"varint,21,opt,name=MinSortNum,proto3" json:"MinSortNum,omitempty"`
	MaxSortNum           int32               `protobuf:"varint,22,opt,name=MaxSortNum,proto3" json:"MaxSortNum,omitempty"`
	RightNum             int32               `protobuf:"varint,23,opt,name=RightNum,proto3" json:"RightNum,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *PBRedEnvelopeDetail) Reset()         { *m = PBRedEnvelopeDetail{} }
func (m *PBRedEnvelopeDetail) String() string { return proto.CompactTextString(m) }
func (*PBRedEnvelopeDetail) ProtoMessage()    {}
func (*PBRedEnvelopeDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_763c21ef7df7fb30, []int{2}
}

func (m *PBRedEnvelopeDetail) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PBRedEnvelopeDetail.Unmarshal(m, b)
}
func (m *PBRedEnvelopeDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PBRedEnvelopeDetail.Marshal(b, m, deterministic)
}
func (m *PBRedEnvelopeDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PBRedEnvelopeDetail.Merge(m, src)
}
func (m *PBRedEnvelopeDetail) XXX_Size() int {
	return xxx_messageInfo_PBRedEnvelopeDetail.Size(m)
}
func (m *PBRedEnvelopeDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_PBRedEnvelopeDetail.DiscardUnknown(m)
}

var xxx_messageInfo_PBRedEnvelopeDetail proto.InternalMessageInfo

func (m *PBRedEnvelopeDetail) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PBRedEnvelopeDetail) GetActivityId() int64 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

func (m *PBRedEnvelopeDetail) GetProductId() int64 {
	if m != nil {
		return m.ProductId
	}
	return 0
}

func (m *PBRedEnvelopeDetail) GetBatchId() int64 {
	if m != nil {
		return m.BatchId
	}
	return 0
}

func (m *PBRedEnvelopeDetail) GetItemId() int64 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func (m *PBRedEnvelopeDetail) GetType() RedEnvelopeItemType {
	if m != nil {
		return m.Type
	}
	return RedEnvelopeItemType_GET_ALL
}

func (m *PBRedEnvelopeDetail) GetWishText() string {
	if m != nil {
		return m.WishText
	}
	return ""
}

func (m *PBRedEnvelopeDetail) GetMoney() int64 {
	if m != nil {
		return m.Money
	}
	return 0
}

func (m *PBRedEnvelopeDetail) GetPrizeName() string {
	if m != nil {
		return m.PrizeName
	}
	return ""
}

func (m *PBRedEnvelopeDetail) GetIsDeliveried() bool {
	if m != nil {
		return m.IsDeliveried
	}
	return false
}

func (m *PBRedEnvelopeDetail) GetIsRecived() bool {
	if m != nil {
		return m.IsRecived
	}
	return false
}

func (m *PBRedEnvelopeDetail) GetLevelName() string {
	if m != nil {
		return m.LevelName
	}
	return ""
}

func (m *PBRedEnvelopeDetail) GetIsSpecialEffects() bool {
	if m != nil {
		return m.IsSpecialEffects
	}
	return false
}

func (m *PBRedEnvelopeDetail) GetPrizeDesc() string {
	if m != nil {
		return m.PrizeDesc
	}
	return ""
}

func (m *PBRedEnvelopeDetail) GetPerWinnerCount() int32 {
	if m != nil {
		return m.PerWinnerCount
	}
	return 0
}

func (m *PBRedEnvelopeDetail) GetIsFixed() bool {
	if m != nil {
		return m.IsFixed
	}
	return false
}

func (m *PBRedEnvelopeDetail) GetPrizeImgUrl() string {
	if m != nil {
		return m.PrizeImgUrl
	}
	return ""
}

func (m *PBRedEnvelopeDetail) GetMinSortNum() int32 {
	if m != nil {
		return m.MinSortNum
	}
	return 0
}

func (m *PBRedEnvelopeDetail) GetMaxSortNum() int32 {
	if m != nil {
		return m.MaxSortNum
	}
	return 0
}

func (m *PBRedEnvelopeDetail) GetRightNum() int32 {
	if m != nil {
		return m.RightNum
	}
	return 0
}

//用户中奖纪录
type PBRedEnvelopeWinnerRecord struct {
	Id                   int64               `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	ActivityId           int64               `protobuf:"varint,2,opt,name=ActivityId,proto3" json:"ActivityId,omitempty"`
	ProductId            int64               `protobuf:"varint,3,opt,name=ProductId,proto3" json:"ProductId,omitempty"`
	BatchId              int64               `protobuf:"varint,4,opt,name=BatchId,proto3" json:"BatchId,omitempty"`
	ItemId               int64               `protobuf:"varint,5,opt,name=ItemId,proto3" json:"ItemId,omitempty"`
	DetailId             int64               `protobuf:"varint,6,opt,name=DetailId,proto3" json:"DetailId,omitempty"`
	Type                 RedEnvelopeItemType `protobuf:"varint,7,opt,name=Type,proto3,enum=RedEnvelopeItemType" json:"Type,omitempty"`
	Money                int64               `protobuf:"varint,8,opt,name=Money,proto3" json:"Money,omitempty"`
	PrizeName            string              `protobuf:"bytes,9,opt,name=PrizeName,proto3" json:"PrizeName,omitempty"`
	SN                   string              `protobuf:"bytes,10,opt,name=SN,proto3" json:"SN,omitempty"`
	UserId               int64               `protobuf:"varint,11,opt,name=UserId,proto3" json:"UserId,omitempty"`
	UserName             string              `protobuf:"bytes,12,opt,name=UserName,proto3" json:"UserName,omitempty"`
	UserAvatar           string              `protobuf:"bytes,13,opt,name=UserAvatar,proto3" json:"UserAvatar,omitempty"`
	UserOpenId           string              `protobuf:"bytes,14,opt,name=UserOpenId,proto3" json:"UserOpenId,omitempty"`
	ReciveTime           int64               `protobuf:"varint,15,opt,name=ReciveTime,proto3" json:"ReciveTime,omitempty"`
	ReciveTimes          int32               `protobuf:"varint,16,opt,name=ReciveTimes,proto3" json:"ReciveTimes,omitempty"`
	FailedReason         string              `protobuf:"bytes,17,opt,name=FailedReason,proto3" json:"FailedReason,omitempty"`
	WXAppKey             string              `protobuf:"bytes,18,opt,name=WXAppKey,proto3" json:"WXAppKey,omitempty"`
	MCHBillNo            string              `protobuf:"bytes,19,opt,name=MCHBillNo,proto3" json:"MCHBillNo,omitempty"`
	CreatedAt            int64               `protobuf:"varint,20,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	LevelName            string              `protobuf:"bytes,21,opt,name=LevelName,proto3" json:"LevelName,omitempty"`
	IsSpecialEffects     bool                `protobuf:"varint,22,opt,name=IsSpecialEffects,proto3" json:"IsSpecialEffects,omitempty"`
	PrizeDesc            string              `protobuf:"bytes,23,opt,name=PrizeDesc,proto3" json:"PrizeDesc,omitempty"`
	Phone                string              `protobuf:"bytes,24,opt,name=Phone,proto3" json:"Phone,omitempty"`
	PrizeImgUrl          string              `protobuf:"bytes,25,opt,name=PrizeImgUrl,proto3" json:"PrizeImgUrl,omitempty"`
	ProductName          string              `protobuf:"bytes,26,opt,name=ProductName,proto3" json:"ProductName,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *PBRedEnvelopeWinnerRecord) Reset()         { *m = PBRedEnvelopeWinnerRecord{} }
func (m *PBRedEnvelopeWinnerRecord) String() string { return proto.CompactTextString(m) }
func (*PBRedEnvelopeWinnerRecord) ProtoMessage()    {}
func (*PBRedEnvelopeWinnerRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_763c21ef7df7fb30, []int{3}
}

func (m *PBRedEnvelopeWinnerRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PBRedEnvelopeWinnerRecord.Unmarshal(m, b)
}
func (m *PBRedEnvelopeWinnerRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PBRedEnvelopeWinnerRecord.Marshal(b, m, deterministic)
}
func (m *PBRedEnvelopeWinnerRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PBRedEnvelopeWinnerRecord.Merge(m, src)
}
func (m *PBRedEnvelopeWinnerRecord) XXX_Size() int {
	return xxx_messageInfo_PBRedEnvelopeWinnerRecord.Size(m)
}
func (m *PBRedEnvelopeWinnerRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_PBRedEnvelopeWinnerRecord.DiscardUnknown(m)
}

var xxx_messageInfo_PBRedEnvelopeWinnerRecord proto.InternalMessageInfo

func (m *PBRedEnvelopeWinnerRecord) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PBRedEnvelopeWinnerRecord) GetActivityId() int64 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

func (m *PBRedEnvelopeWinnerRecord) GetProductId() int64 {
	if m != nil {
		return m.ProductId
	}
	return 0
}

func (m *PBRedEnvelopeWinnerRecord) GetBatchId() int64 {
	if m != nil {
		return m.BatchId
	}
	return 0
}

func (m *PBRedEnvelopeWinnerRecord) GetItemId() int64 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func (m *PBRedEnvelopeWinnerRecord) GetDetailId() int64 {
	if m != nil {
		return m.DetailId
	}
	return 0
}

func (m *PBRedEnvelopeWinnerRecord) GetType() RedEnvelopeItemType {
	if m != nil {
		return m.Type
	}
	return RedEnvelopeItemType_GET_ALL
}

func (m *PBRedEnvelopeWinnerRecord) GetMoney() int64 {
	if m != nil {
		return m.Money
	}
	return 0
}

func (m *PBRedEnvelopeWinnerRecord) GetPrizeName() string {
	if m != nil {
		return m.PrizeName
	}
	return ""
}

func (m *PBRedEnvelopeWinnerRecord) GetSN() string {
	if m != nil {
		return m.SN
	}
	return ""
}

func (m *PBRedEnvelopeWinnerRecord) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *PBRedEnvelopeWinnerRecord) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *PBRedEnvelopeWinnerRecord) GetUserAvatar() string {
	if m != nil {
		return m.UserAvatar
	}
	return ""
}

func (m *PBRedEnvelopeWinnerRecord) GetUserOpenId() string {
	if m != nil {
		return m.UserOpenId
	}
	return ""
}

func (m *PBRedEnvelopeWinnerRecord) GetReciveTime() int64 {
	if m != nil {
		return m.ReciveTime
	}
	return 0
}

func (m *PBRedEnvelopeWinnerRecord) GetReciveTimes() int32 {
	if m != nil {
		return m.ReciveTimes
	}
	return 0
}

func (m *PBRedEnvelopeWinnerRecord) GetFailedReason() string {
	if m != nil {
		return m.FailedReason
	}
	return ""
}

func (m *PBRedEnvelopeWinnerRecord) GetWXAppKey() string {
	if m != nil {
		return m.WXAppKey
	}
	return ""
}

func (m *PBRedEnvelopeWinnerRecord) GetMCHBillNo() string {
	if m != nil {
		return m.MCHBillNo
	}
	return ""
}

func (m *PBRedEnvelopeWinnerRecord) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *PBRedEnvelopeWinnerRecord) GetLevelName() string {
	if m != nil {
		return m.LevelName
	}
	return ""
}

func (m *PBRedEnvelopeWinnerRecord) GetIsSpecialEffects() bool {
	if m != nil {
		return m.IsSpecialEffects
	}
	return false
}

func (m *PBRedEnvelopeWinnerRecord) GetPrizeDesc() string {
	if m != nil {
		return m.PrizeDesc
	}
	return ""
}

func (m *PBRedEnvelopeWinnerRecord) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *PBRedEnvelopeWinnerRecord) GetPrizeImgUrl() string {
	if m != nil {
		return m.PrizeImgUrl
	}
	return ""
}

func (m *PBRedEnvelopeWinnerRecord) GetProductName() string {
	if m != nil {
		return m.ProductName
	}
	return ""
}

//获取红包奖品批次列表请求
type GetRedEnvelopeListReq struct {
	ActivityId           int64    `protobuf:"varint,1,opt,name=ActivityId,proto3" json:"ActivityId,omitempty"`
	ProductId            int64    `protobuf:"varint,2,opt,name=ProductId,proto3" json:"ProductId,omitempty"`
	IsContentItem        bool     `protobuf:"varint,3,opt,name=IsContentItem,proto3" json:"IsContentItem,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRedEnvelopeListReq) Reset()         { *m = GetRedEnvelopeListReq{} }
func (m *GetRedEnvelopeListReq) String() string { return proto.CompactTextString(m) }
func (*GetRedEnvelopeListReq) ProtoMessage()    {}
func (*GetRedEnvelopeListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_763c21ef7df7fb30, []int{4}
}

func (m *GetRedEnvelopeListReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRedEnvelopeListReq.Unmarshal(m, b)
}
func (m *GetRedEnvelopeListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRedEnvelopeListReq.Marshal(b, m, deterministic)
}
func (m *GetRedEnvelopeListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRedEnvelopeListReq.Merge(m, src)
}
func (m *GetRedEnvelopeListReq) XXX_Size() int {
	return xxx_messageInfo_GetRedEnvelopeListReq.Size(m)
}
func (m *GetRedEnvelopeListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRedEnvelopeListReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetRedEnvelopeListReq proto.InternalMessageInfo

func (m *GetRedEnvelopeListReq) GetActivityId() int64 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

func (m *GetRedEnvelopeListReq) GetProductId() int64 {
	if m != nil {
		return m.ProductId
	}
	return 0
}

func (m *GetRedEnvelopeListReq) GetIsContentItem() bool {
	if m != nil {
		return m.IsContentItem
	}
	return false
}

//获取红包奖品批次列表返回
type GetRedEnvelopeListRsp struct {
	Code                 Code                  `protobuf:"varint,1,opt,name=Code,proto3,enum=Code" json:"Code,omitempty"`
	List                 []*PBRedEnvelopeBatch `protobuf:"bytes,2,rep,name=List,proto3" json:"List,omitempty"`
	IsFixUser            bool                  `protobuf:"varint,3,opt,name=IsFixUser,proto3" json:"IsFixUser,omitempty"`
	IsOnlyOneBatch       bool                  `protobuf:"varint,4,opt,name=IsOnlyOneBatch,proto3" json:"IsOnlyOneBatch,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *GetRedEnvelopeListRsp) Reset()         { *m = GetRedEnvelopeListRsp{} }
func (m *GetRedEnvelopeListRsp) String() string { return proto.CompactTextString(m) }
func (*GetRedEnvelopeListRsp) ProtoMessage()    {}
func (*GetRedEnvelopeListRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_763c21ef7df7fb30, []int{5}
}

func (m *GetRedEnvelopeListRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRedEnvelopeListRsp.Unmarshal(m, b)
}
func (m *GetRedEnvelopeListRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRedEnvelopeListRsp.Marshal(b, m, deterministic)
}
func (m *GetRedEnvelopeListRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRedEnvelopeListRsp.Merge(m, src)
}
func (m *GetRedEnvelopeListRsp) XXX_Size() int {
	return xxx_messageInfo_GetRedEnvelopeListRsp.Size(m)
}
func (m *GetRedEnvelopeListRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRedEnvelopeListRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetRedEnvelopeListRsp proto.InternalMessageInfo

func (m *GetRedEnvelopeListRsp) GetCode() Code {
	if m != nil {
		return m.Code
	}
	return Code_NOT_USE
}

func (m *GetRedEnvelopeListRsp) GetList() []*PBRedEnvelopeBatch {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *GetRedEnvelopeListRsp) GetIsFixUser() bool {
	if m != nil {
		return m.IsFixUser
	}
	return false
}

func (m *GetRedEnvelopeListRsp) GetIsOnlyOneBatch() bool {
	if m != nil {
		return m.IsOnlyOneBatch
	}
	return false
}

//删除红包奖品批次数据请求
type DeleteRenEnvelopeBatchReq struct {
	ActivityId           int64    `protobuf:"varint,1,opt,name=ActivityId,proto3" json:"ActivityId,omitempty"`
	ProductId            int64    `protobuf:"varint,2,opt,name=ProductId,proto3" json:"ProductId,omitempty"`
	BatchId              int64    `protobuf:"varint,3,opt,name=BatchId,proto3" json:"BatchId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteRenEnvelopeBatchReq) Reset()         { *m = DeleteRenEnvelopeBatchReq{} }
func (m *DeleteRenEnvelopeBatchReq) String() string { return proto.CompactTextString(m) }
func (*DeleteRenEnvelopeBatchReq) ProtoMessage()    {}
func (*DeleteRenEnvelopeBatchReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_763c21ef7df7fb30, []int{6}
}

func (m *DeleteRenEnvelopeBatchReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteRenEnvelopeBatchReq.Unmarshal(m, b)
}
func (m *DeleteRenEnvelopeBatchReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteRenEnvelopeBatchReq.Marshal(b, m, deterministic)
}
func (m *DeleteRenEnvelopeBatchReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRenEnvelopeBatchReq.Merge(m, src)
}
func (m *DeleteRenEnvelopeBatchReq) XXX_Size() int {
	return xxx_messageInfo_DeleteRenEnvelopeBatchReq.Size(m)
}
func (m *DeleteRenEnvelopeBatchReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRenEnvelopeBatchReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRenEnvelopeBatchReq proto.InternalMessageInfo

func (m *DeleteRenEnvelopeBatchReq) GetActivityId() int64 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

func (m *DeleteRenEnvelopeBatchReq) GetProductId() int64 {
	if m != nil {
		return m.ProductId
	}
	return 0
}

func (m *DeleteRenEnvelopeBatchReq) GetBatchId() int64 {
	if m != nil {
		return m.BatchId
	}
	return 0
}

//删除单个红包奖品请求
type DeleteRedEnvelopeItemReq struct {
	ActivityId           int64    `protobuf:"varint,1,opt,name=ActivityId,proto3" json:"ActivityId,omitempty"`
	ProductId            int64    `protobuf:"varint,2,opt,name=ProductId,proto3" json:"ProductId,omitempty"`
	BatchId              int64    `protobuf:"varint,3,opt,name=BatchId,proto3" json:"BatchId,omitempty"`
	ItemId               int64    `protobuf:"varint,4,opt,name=ItemId,proto3" json:"ItemId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteRedEnvelopeItemReq) Reset()         { *m = DeleteRedEnvelopeItemReq{} }
func (m *DeleteRedEnvelopeItemReq) String() string { return proto.CompactTextString(m) }
func (*DeleteRedEnvelopeItemReq) ProtoMessage()    {}
func (*DeleteRedEnvelopeItemReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_763c21ef7df7fb30, []int{7}
}

func (m *DeleteRedEnvelopeItemReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteRedEnvelopeItemReq.Unmarshal(m, b)
}
func (m *DeleteRedEnvelopeItemReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteRedEnvelopeItemReq.Marshal(b, m, deterministic)
}
func (m *DeleteRedEnvelopeItemReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRedEnvelopeItemReq.Merge(m, src)
}
func (m *DeleteRedEnvelopeItemReq) XXX_Size() int {
	return xxx_messageInfo_DeleteRedEnvelopeItemReq.Size(m)
}
func (m *DeleteRedEnvelopeItemReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRedEnvelopeItemReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRedEnvelopeItemReq proto.InternalMessageInfo

func (m *DeleteRedEnvelopeItemReq) GetActivityId() int64 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

func (m *DeleteRedEnvelopeItemReq) GetProductId() int64 {
	if m != nil {
		return m.ProductId
	}
	return 0
}

func (m *DeleteRedEnvelopeItemReq) GetBatchId() int64 {
	if m != nil {
		return m.BatchId
	}
	return 0
}

func (m *DeleteRedEnvelopeItemReq) GetItemId() int64 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

//新增或者修改单个红包奖品请求
type SaveRedEnvelopeItemReq struct {
	Info                 *PBRedEnvelopeItem `protobuf:"bytes,1,opt,name=Info,proto3" json:"Info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *SaveRedEnvelopeItemReq) Reset()         { *m = SaveRedEnvelopeItemReq{} }
func (m *SaveRedEnvelopeItemReq) String() string { return proto.CompactTextString(m) }
func (*SaveRedEnvelopeItemReq) ProtoMessage()    {}
func (*SaveRedEnvelopeItemReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_763c21ef7df7fb30, []int{8}
}

func (m *SaveRedEnvelopeItemReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SaveRedEnvelopeItemReq.Unmarshal(m, b)
}
func (m *SaveRedEnvelopeItemReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SaveRedEnvelopeItemReq.Marshal(b, m, deterministic)
}
func (m *SaveRedEnvelopeItemReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveRedEnvelopeItemReq.Merge(m, src)
}
func (m *SaveRedEnvelopeItemReq) XXX_Size() int {
	return xxx_messageInfo_SaveRedEnvelopeItemReq.Size(m)
}
func (m *SaveRedEnvelopeItemReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveRedEnvelopeItemReq.DiscardUnknown(m)
}

var xxx_messageInfo_SaveRedEnvelopeItemReq proto.InternalMessageInfo

func (m *SaveRedEnvelopeItemReq) GetInfo() *PBRedEnvelopeItem {
	if m != nil {
		return m.Info
	}
	return nil
}

//新增或者修改单个红包奖品请求返回
type SaveRedEnvelopeItemRsp struct {
	Code                 Code     `protobuf:"varint,1,opt,name=Code,proto3,enum=Code" json:"Code,omitempty"`
	ItemId               int64    `protobuf:"varint,2,opt,name=ItemId,proto3" json:"ItemId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SaveRedEnvelopeItemRsp) Reset()         { *m = SaveRedEnvelopeItemRsp{} }
func (m *SaveRedEnvelopeItemRsp) String() string { return proto.CompactTextString(m) }
func (*SaveRedEnvelopeItemRsp) ProtoMessage()    {}
func (*SaveRedEnvelopeItemRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_763c21ef7df7fb30, []int{9}
}

func (m *SaveRedEnvelopeItemRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SaveRedEnvelopeItemRsp.Unmarshal(m, b)
}
func (m *SaveRedEnvelopeItemRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SaveRedEnvelopeItemRsp.Marshal(b, m, deterministic)
}
func (m *SaveRedEnvelopeItemRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveRedEnvelopeItemRsp.Merge(m, src)
}
func (m *SaveRedEnvelopeItemRsp) XXX_Size() int {
	return xxx_messageInfo_SaveRedEnvelopeItemRsp.Size(m)
}
func (m *SaveRedEnvelopeItemRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveRedEnvelopeItemRsp.DiscardUnknown(m)
}

var xxx_messageInfo_SaveRedEnvelopeItemRsp proto.InternalMessageInfo

func (m *SaveRedEnvelopeItemRsp) GetCode() Code {
	if m != nil {
		return m.Code
	}
	return Code_NOT_USE
}

func (m *SaveRedEnvelopeItemRsp) GetItemId() int64 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

type FixUser struct {
	Id                   int64    `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	ActivityId           int64    `protobuf:"varint,2,opt,name=ActivityId,proto3" json:"ActivityId,omitempty"`
	ProductId            int64    `protobuf:"varint,3,opt,name=ProductId,proto3" json:"ProductId,omitempty"`
	BatchId              int64    `protobuf:"varint,4,opt,name=BatchId,proto3" json:"BatchId,omitempty"`
	ItemId               int64    `protobuf:"varint,5,opt,name=ItemId,proto3" json:"ItemId,omitempty"`
	UserId               int64    `protobuf:"varint,6,opt,name=UserId,proto3" json:"UserId,omitempty"`
	UserName             string   `protobuf:"bytes,7,opt,name=UserName,proto3" json:"UserName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FixUser) Reset()         { *m = FixUser{} }
func (m *FixUser) String() string { return proto.CompactTextString(m) }
func (*FixUser) ProtoMessage()    {}
func (*FixUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_763c21ef7df7fb30, []int{10}
}

func (m *FixUser) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FixUser.Unmarshal(m, b)
}
func (m *FixUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FixUser.Marshal(b, m, deterministic)
}
func (m *FixUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FixUser.Merge(m, src)
}
func (m *FixUser) XXX_Size() int {
	return xxx_messageInfo_FixUser.Size(m)
}
func (m *FixUser) XXX_DiscardUnknown() {
	xxx_messageInfo_FixUser.DiscardUnknown(m)
}

var xxx_messageInfo_FixUser proto.InternalMessageInfo

func (m *FixUser) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *FixUser) GetActivityId() int64 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

func (m *FixUser) GetProductId() int64 {
	if m != nil {
		return m.ProductId
	}
	return 0
}

func (m *FixUser) GetBatchId() int64 {
	if m != nil {
		return m.BatchId
	}
	return 0
}

func (m *FixUser) GetItemId() int64 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func (m *FixUser) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *FixUser) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

//按批次获取红包奖品信息请求
type GetRedEnvelopeBatchByIdReq struct {
	ActivityId           int64    `protobuf:"varint,1,opt,name=ActivityId,proto3" json:"ActivityId,omitempty"`
	ProductId            int64    `protobuf:"varint,2,opt,name=ProductId,proto3" json:"ProductId,omitempty"`
	BatchId              int64    `protobuf:"varint,3,opt,name=BatchId,proto3" json:"BatchId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRedEnvelopeBatchByIdReq) Reset()         { *m = GetRedEnvelopeBatchByIdReq{} }
func (m *GetRedEnvelopeBatchByIdReq) String() string { return proto.CompactTextString(m) }
func (*GetRedEnvelopeBatchByIdReq) ProtoMessage()    {}
func (*GetRedEnvelopeBatchByIdReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_763c21ef7df7fb30, []int{11}
}

func (m *GetRedEnvelopeBatchByIdReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRedEnvelopeBatchByIdReq.Unmarshal(m, b)
}
func (m *GetRedEnvelopeBatchByIdReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRedEnvelopeBatchByIdReq.Marshal(b, m, deterministic)
}
func (m *GetRedEnvelopeBatchByIdReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRedEnvelopeBatchByIdReq.Merge(m, src)
}
func (m *GetRedEnvelopeBatchByIdReq) XXX_Size() int {
	return xxx_messageInfo_GetRedEnvelopeBatchByIdReq.Size(m)
}
func (m *GetRedEnvelopeBatchByIdReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRedEnvelopeBatchByIdReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetRedEnvelopeBatchByIdReq proto.InternalMessageInfo

func (m *GetRedEnvelopeBatchByIdReq) GetActivityId() int64 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

func (m *GetRedEnvelopeBatchByIdReq) GetProductId() int64 {
	if m != nil {
		return m.ProductId
	}
	return 0
}

func (m *GetRedEnvelopeBatchByIdReq) GetBatchId() int64 {
	if m != nil {
		return m.BatchId
	}
	return 0
}

//按批次获取红包奖品信息返回
type GetRedEnvelopeBatchByIdRsp struct {
	Code                 Code                `protobuf:"varint,1,opt,name=Code,proto3,enum=Code" json:"Code,omitempty"`
	Detail               *PBRedEnvelopeBatch `protobuf:"bytes,2,opt,name=Detail,proto3" json:"Detail,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *GetRedEnvelopeBatchByIdRsp) Reset()         { *m = GetRedEnvelopeBatchByIdRsp{} }
func (m *GetRedEnvelopeBatchByIdRsp) String() string { return proto.CompactTextString(m) }
func (*GetRedEnvelopeBatchByIdRsp) ProtoMessage()    {}
func (*GetRedEnvelopeBatchByIdRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_763c21ef7df7fb30, []int{12}
}

func (m *GetRedEnvelopeBatchByIdRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRedEnvelopeBatchByIdRsp.Unmarshal(m, b)
}
func (m *GetRedEnvelopeBatchByIdRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRedEnvelopeBatchByIdRsp.Marshal(b, m, deterministic)
}
func (m *GetRedEnvelopeBatchByIdRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRedEnvelopeBatchByIdRsp.Merge(m, src)
}
func (m *GetRedEnvelopeBatchByIdRsp) XXX_Size() int {
	return xxx_messageInfo_GetRedEnvelopeBatchByIdRsp.Size(m)
}
func (m *GetRedEnvelopeBatchByIdRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRedEnvelopeBatchByIdRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetRedEnvelopeBatchByIdRsp proto.InternalMessageInfo

func (m *GetRedEnvelopeBatchByIdRsp) GetCode() Code {
	if m != nil {
		return m.Code
	}
	return Code_NOT_USE
}

func (m *GetRedEnvelopeBatchByIdRsp) GetDetail() *PBRedEnvelopeBatch {
	if m != nil {
		return m.Detail
	}
	return nil
}

//保存红包奖品批次请求
type SaveRedEnvelopeBatchReq struct {
	Info                 *PBRedEnvelopeBatch `protobuf:"bytes,1,opt,name=Info,proto3" json:"Info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *SaveRedEnvelopeBatchReq) Reset()         { *m = SaveRedEnvelopeBatchReq{} }
func (m *SaveRedEnvelopeBatchReq) String() string { return proto.CompactTextString(m) }
func (*SaveRedEnvelopeBatchReq) ProtoMessage()    {}
func (*SaveRedEnvelopeBatchReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_763c21ef7df7fb30, []int{13}
}

func (m *SaveRedEnvelopeBatchReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SaveRedEnvelopeBatchReq.Unmarshal(m, b)
}
func (m *SaveRedEnvelopeBatchReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SaveRedEnvelopeBatchReq.Marshal(b, m, deterministic)
}
func (m *SaveRedEnvelopeBatchReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveRedEnvelopeBatchReq.Merge(m, src)
}
func (m *SaveRedEnvelopeBatchReq) XXX_Size() int {
	return xxx_messageInfo_SaveRedEnvelopeBatchReq.Size(m)
}
func (m *SaveRedEnvelopeBatchReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveRedEnvelopeBatchReq.DiscardUnknown(m)
}

var xxx_messageInfo_SaveRedEnvelopeBatchReq proto.InternalMessageInfo

func (m *SaveRedEnvelopeBatchReq) GetInfo() *PBRedEnvelopeBatch {
	if m != nil {
		return m.Info
	}
	return nil
}

//保存红包奖品批次请求
type SaveRedEnvelopeBatchRsp struct {
	Code                 Code     `protobuf:"varint,1,opt,name=Code,proto3,enum=Code" json:"Code,omitempty"`
	BatchId              int64    `protobuf:"varint,2,opt,name=BatchId,proto3" json:"BatchId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SaveRedEnvelopeBatchRsp) Reset()         { *m = SaveRedEnvelopeBatchRsp{} }
func (m *SaveRedEnvelopeBatchRsp) String() string { return proto.CompactTextString(m) }
func (*SaveRedEnvelopeBatchRsp) ProtoMessage()    {}
func (*SaveRedEnvelopeBatchRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_763c21ef7df7fb30, []int{14}
}

func (m *SaveRedEnvelopeBatchRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SaveRedEnvelopeBatchRsp.Unmarshal(m, b)
}
func (m *SaveRedEnvelopeBatchRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SaveRedEnvelopeBatchRsp.Marshal(b, m, deterministic)
}
func (m *SaveRedEnvelopeBatchRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveRedEnvelopeBatchRsp.Merge(m, src)
}
func (m *SaveRedEnvelopeBatchRsp) XXX_Size() int {
	return xxx_messageInfo_SaveRedEnvelopeBatchRsp.Size(m)
}
func (m *SaveRedEnvelopeBatchRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveRedEnvelopeBatchRsp.DiscardUnknown(m)
}

var xxx_messageInfo_SaveRedEnvelopeBatchRsp proto.InternalMessageInfo

func (m *SaveRedEnvelopeBatchRsp) GetCode() Code {
	if m != nil {
		return m.Code
	}
	return Code_NOT_USE
}

func (m *SaveRedEnvelopeBatchRsp) GetBatchId() int64 {
	if m != nil {
		return m.BatchId
	}
	return 0
}

//更新批次状态请求
type UpdateRedEnvelopeStateReq struct {
	ActivityId           int64                  `protobuf:"varint,1,opt,name=ActivityId,proto3" json:"ActivityId,omitempty"`
	ProductId            int64                  `protobuf:"varint,2,opt,name=ProductId,proto3" json:"ProductId,omitempty"`
	BatchId              int64                  `protobuf:"varint,3,opt,name=BatchId,proto3" json:"BatchId,omitempty"`
	State                RedEnvelopeBatchStatus `protobuf:"varint,4,opt,name=State,proto3,enum=RedEnvelopeBatchStatus" json:"State,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *UpdateRedEnvelopeStateReq) Reset()         { *m = UpdateRedEnvelopeStateReq{} }
func (m *UpdateRedEnvelopeStateReq) String() string { return proto.CompactTextString(m) }
func (*UpdateRedEnvelopeStateReq) ProtoMessage()    {}
func (*UpdateRedEnvelopeStateReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_763c21ef7df7fb30, []int{15}
}

func (m *UpdateRedEnvelopeStateReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateRedEnvelopeStateReq.Unmarshal(m, b)
}
func (m *UpdateRedEnvelopeStateReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateRedEnvelopeStateReq.Marshal(b, m, deterministic)
}
func (m *UpdateRedEnvelopeStateReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRedEnvelopeStateReq.Merge(m, src)
}
func (m *UpdateRedEnvelopeStateReq) XXX_Size() int {
	return xxx_messageInfo_UpdateRedEnvelopeStateReq.Size(m)
}
func (m *UpdateRedEnvelopeStateReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRedEnvelopeStateReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRedEnvelopeStateReq proto.InternalMessageInfo

func (m *UpdateRedEnvelopeStateReq) GetActivityId() int64 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

func (m *UpdateRedEnvelopeStateReq) GetProductId() int64 {
	if m != nil {
		return m.ProductId
	}
	return 0
}

func (m *UpdateRedEnvelopeStateReq) GetBatchId() int64 {
	if m != nil {
		return m.BatchId
	}
	return 0
}

func (m *UpdateRedEnvelopeStateReq) GetState() RedEnvelopeBatchStatus {
	if m != nil {
		return m.State
	}
	return RedEnvelopeBatchStatus_ALL
}

//保存中奖纪录请求
type SaveRedEnvelopeWinnerReq struct {
	List                 []*PBRedEnvelopeWinnerRecord `protobuf:"bytes,1,rep,name=List,proto3" json:"List,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *SaveRedEnvelopeWinnerReq) Reset()         { *m = SaveRedEnvelopeWinnerReq{} }
func (m *SaveRedEnvelopeWinnerReq) String() string { return proto.CompactTextString(m) }
func (*SaveRedEnvelopeWinnerReq) ProtoMessage()    {}
func (*SaveRedEnvelopeWinnerReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_763c21ef7df7fb30, []int{16}
}

func (m *SaveRedEnvelopeWinnerReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SaveRedEnvelopeWinnerReq.Unmarshal(m, b)
}
func (m *SaveRedEnvelopeWinnerReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SaveRedEnvelopeWinnerReq.Marshal(b, m, deterministic)
}
func (m *SaveRedEnvelopeWinnerReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveRedEnvelopeWinnerReq.Merge(m, src)
}
func (m *SaveRedEnvelopeWinnerReq) XXX_Size() int {
	return xxx_messageInfo_SaveRedEnvelopeWinnerReq.Size(m)
}
func (m *SaveRedEnvelopeWinnerReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveRedEnvelopeWinnerReq.DiscardUnknown(m)
}

var xxx_messageInfo_SaveRedEnvelopeWinnerReq proto.InternalMessageInfo

func (m *SaveRedEnvelopeWinnerReq) GetList() []*PBRedEnvelopeWinnerRecord {
	if m != nil {
		return m.List
	}
	return nil
}

//获取红包奖品中奖列表请求
type GetRedEnvelopeWinnerListReq struct {
	ActivityId           int64    `protobuf:"varint,1,opt,name=ActivityId,proto3" json:"ActivityId,omitempty"`
	ProductId            int64    `protobuf:"varint,2,opt,name=ProductId,proto3" json:"ProductId,omitempty"`
	PageSize             int32    `protobuf:"varint,3,opt,name=PageSize,proto3" json:"PageSize,omitempty"`
	PageIndex            int32    `protobuf:"varint,4,opt,name=PageIndex,proto3" json:"PageIndex,omitempty"`
	BatchId              int64    `protobuf:"varint,5,opt,name=BatchId,proto3" json:"BatchId,omitempty"`
	FansId               int64    `protobuf:"varint,6,opt,name=FansId,proto3" json:"FansId,omitempty"`
	SN                   string   `protobuf:"bytes,7,opt,name=SN,proto3" json:"SN,omitempty"`
	FansNickName         string   `protobuf:"bytes,8,opt,name=FansNickName,proto3" json:"FansNickName,omitempty"`
	PrizeName            string   `protobuf:"bytes,9,opt,name=PrizeName,proto3" json:"PrizeName,omitempty"`
	Phone                string   `protobuf:"bytes,10,opt,name=Phone,proto3" json:"Phone,omitempty"`
	Search               string   `protobuf:"bytes,11,opt,name=Search,proto3" json:"Search,omitempty"`
	PrizeType            int32    `protobuf:"varint,12,opt,name=PrizeType,proto3" json:"PrizeType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRedEnvelopeWinnerListReq) Reset()         { *m = GetRedEnvelopeWinnerListReq{} }
func (m *GetRedEnvelopeWinnerListReq) String() string { return proto.CompactTextString(m) }
func (*GetRedEnvelopeWinnerListReq) ProtoMessage()    {}
func (*GetRedEnvelopeWinnerListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_763c21ef7df7fb30, []int{17}
}

func (m *GetRedEnvelopeWinnerListReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRedEnvelopeWinnerListReq.Unmarshal(m, b)
}
func (m *GetRedEnvelopeWinnerListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRedEnvelopeWinnerListReq.Marshal(b, m, deterministic)
}
func (m *GetRedEnvelopeWinnerListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRedEnvelopeWinnerListReq.Merge(m, src)
}
func (m *GetRedEnvelopeWinnerListReq) XXX_Size() int {
	return xxx_messageInfo_GetRedEnvelopeWinnerListReq.Size(m)
}
func (m *GetRedEnvelopeWinnerListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRedEnvelopeWinnerListReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetRedEnvelopeWinnerListReq proto.InternalMessageInfo

func (m *GetRedEnvelopeWinnerListReq) GetActivityId() int64 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

func (m *GetRedEnvelopeWinnerListReq) GetProductId() int64 {
	if m != nil {
		return m.ProductId
	}
	return 0
}

func (m *GetRedEnvelopeWinnerListReq) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *GetRedEnvelopeWinnerListReq) GetPageIndex() int32 {
	if m != nil {
		return m.PageIndex
	}
	return 0
}

func (m *GetRedEnvelopeWinnerListReq) GetBatchId() int64 {
	if m != nil {
		return m.BatchId
	}
	return 0
}

func (m *GetRedEnvelopeWinnerListReq) GetFansId() int64 {
	if m != nil {
		return m.FansId
	}
	return 0
}

func (m *GetRedEnvelopeWinnerListReq) GetSN() string {
	if m != nil {
		return m.SN
	}
	return ""
}

func (m *GetRedEnvelopeWinnerListReq) GetFansNickName() string {
	if m != nil {
		return m.FansNickName
	}
	return ""
}

func (m *GetRedEnvelopeWinnerListReq) GetPrizeName() string {
	if m != nil {
		return m.PrizeName
	}
	return ""
}

func (m *GetRedEnvelopeWinnerListReq) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *GetRedEnvelopeWinnerListReq) GetSearch() string {
	if m != nil {
		return m.Search
	}
	return ""
}

func (m *GetRedEnvelopeWinnerListReq) GetPrizeType() int32 {
	if m != nil {
		return m.PrizeType
	}
	return 0
}

//获取中奖列表返回
type GetRedEnvelopeWinnerListRsp struct {
	Code                 Code                         `protobuf:"varint,1,opt,name=Code,proto3,enum=Code" json:"Code,omitempty"`
	TotalPage            int32                        `protobuf:"varint,2,opt,name=TotalPage,proto3" json:"TotalPage,omitempty"`
	TotalCount           int32                        `protobuf:"varint,3,opt,name=TotalCount,proto3" json:"TotalCount,omitempty"`
	PageSize             int32                        `protobuf:"varint,4,opt,name=PageSize,proto3" json:"PageSize,omitempty"`
	PageIndex            int32                        `protobuf:"varint,5,opt,name=PageIndex,proto3" json:"PageIndex,omitempty"`
	List                 []*PBRedEnvelopeWinnerRecord `protobuf:"bytes,6,rep,name=List,proto3" json:"List,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *GetRedEnvelopeWinnerListRsp) Reset()         { *m = GetRedEnvelopeWinnerListRsp{} }
func (m *GetRedEnvelopeWinnerListRsp) String() string { return proto.CompactTextString(m) }
func (*GetRedEnvelopeWinnerListRsp) ProtoMessage()    {}
func (*GetRedEnvelopeWinnerListRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_763c21ef7df7fb30, []int{18}
}

func (m *GetRedEnvelopeWinnerListRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRedEnvelopeWinnerListRsp.Unmarshal(m, b)
}
func (m *GetRedEnvelopeWinnerListRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRedEnvelopeWinnerListRsp.Marshal(b, m, deterministic)
}
func (m *GetRedEnvelopeWinnerListRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRedEnvelopeWinnerListRsp.Merge(m, src)
}
func (m *GetRedEnvelopeWinnerListRsp) XXX_Size() int {
	return xxx_messageInfo_GetRedEnvelopeWinnerListRsp.Size(m)
}
func (m *GetRedEnvelopeWinnerListRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRedEnvelopeWinnerListRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetRedEnvelopeWinnerListRsp proto.InternalMessageInfo

func (m *GetRedEnvelopeWinnerListRsp) GetCode() Code {
	if m != nil {
		return m.Code
	}
	return Code_NOT_USE
}

func (m *GetRedEnvelopeWinnerListRsp) GetTotalPage() int32 {
	if m != nil {
		return m.TotalPage
	}
	return 0
}

func (m *GetRedEnvelopeWinnerListRsp) GetTotalCount() int32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *GetRedEnvelopeWinnerListRsp) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *GetRedEnvelopeWinnerListRsp) GetPageIndex() int32 {
	if m != nil {
		return m.PageIndex
	}
	return 0
}

func (m *GetRedEnvelopeWinnerListRsp) GetList() []*PBRedEnvelopeWinnerRecord {
	if m != nil {
		return m.List
	}
	return nil
}

//更新实物红包奖品发送记录
type UpdateRedEnvelopeDeliveriedStateReq struct {
	ActivityId           int64                   `protobuf:"varint,1,opt,name=ActivityId,proto3" json:"ActivityId,omitempty"`
	ProductId            int64                   `protobuf:"varint,2,opt,name=ProductId,proto3" json:"ProductId,omitempty"`
	RecordId             int64                   `protobuf:"varint,3,opt,name=RecordId,proto3" json:"RecordId,omitempty"`
	State                RedPrizeDeliveriedState `protobuf:"varint,4,opt,name=State,proto3,enum=RedPrizeDeliveriedState" json:"State,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *UpdateRedEnvelopeDeliveriedStateReq) Reset()         { *m = UpdateRedEnvelopeDeliveriedStateReq{} }
func (m *UpdateRedEnvelopeDeliveriedStateReq) String() string { return proto.CompactTextString(m) }
func (*UpdateRedEnvelopeDeliveriedStateReq) ProtoMessage()    {}
func (*UpdateRedEnvelopeDeliveriedStateReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_763c21ef7df7fb30, []int{19}
}

func (m *UpdateRedEnvelopeDeliveriedStateReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateRedEnvelopeDeliveriedStateReq.Unmarshal(m, b)
}
func (m *UpdateRedEnvelopeDeliveriedStateReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateRedEnvelopeDeliveriedStateReq.Marshal(b, m, deterministic)
}
func (m *UpdateRedEnvelopeDeliveriedStateReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRedEnvelopeDeliveriedStateReq.Merge(m, src)
}
func (m *UpdateRedEnvelopeDeliveriedStateReq) XXX_Size() int {
	return xxx_messageInfo_UpdateRedEnvelopeDeliveriedStateReq.Size(m)
}
func (m *UpdateRedEnvelopeDeliveriedStateReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRedEnvelopeDeliveriedStateReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRedEnvelopeDeliveriedStateReq proto.InternalMessageInfo

func (m *UpdateRedEnvelopeDeliveriedStateReq) GetActivityId() int64 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

func (m *UpdateRedEnvelopeDeliveriedStateReq) GetProductId() int64 {
	if m != nil {
		return m.ProductId
	}
	return 0
}

func (m *UpdateRedEnvelopeDeliveriedStateReq) GetRecordId() int64 {
	if m != nil {
		return m.RecordId
	}
	return 0
}

func (m *UpdateRedEnvelopeDeliveriedStateReq) GetState() RedPrizeDeliveriedState {
	if m != nil {
		return m.State
	}
	return RedPrizeDeliveriedState_NOSEND
}

//生成小红包奖品请求
type GenerateRedEnvelopeDetailReq struct {
	ActivityId           int64    `protobuf:"varint,1,opt,name=ActivityId,proto3" json:"ActivityId,omitempty"`
	ProductId            int64    `protobuf:"varint,2,opt,name=ProductId,proto3" json:"ProductId,omitempty"`
	BatchId              int64    `protobuf:"varint,3,opt,name=BatchId,proto3" json:"BatchId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GenerateRedEnvelopeDetailReq) Reset()         { *m = GenerateRedEnvelopeDetailReq{} }
func (m *GenerateRedEnvelopeDetailReq) String() string { return proto.CompactTextString(m) }
func (*GenerateRedEnvelopeDetailReq) ProtoMessage()    {}
func (*GenerateRedEnvelopeDetailReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_763c21ef7df7fb30, []int{20}
}

func (m *GenerateRedEnvelopeDetailReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenerateRedEnvelopeDetailReq.Unmarshal(m, b)
}
func (m *GenerateRedEnvelopeDetailReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenerateRedEnvelopeDetailReq.Marshal(b, m, deterministic)
}
func (m *GenerateRedEnvelopeDetailReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenerateRedEnvelopeDetailReq.Merge(m, src)
}
func (m *GenerateRedEnvelopeDetailReq) XXX_Size() int {
	return xxx_messageInfo_GenerateRedEnvelopeDetailReq.Size(m)
}
func (m *GenerateRedEnvelopeDetailReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GenerateRedEnvelopeDetailReq.DiscardUnknown(m)
}

var xxx_messageInfo_GenerateRedEnvelopeDetailReq proto.InternalMessageInfo

func (m *GenerateRedEnvelopeDetailReq) GetActivityId() int64 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

func (m *GenerateRedEnvelopeDetailReq) GetProductId() int64 {
	if m != nil {
		return m.ProductId
	}
	return 0
}

func (m *GenerateRedEnvelopeDetailReq) GetBatchId() int64 {
	if m != nil {
		return m.BatchId
	}
	return 0
}

//获取小红包奖品列表请求
type GetRedEnvelopeDetailListReq struct {
	ActivityId           int64    `protobuf:"varint,1,opt,name=ActivityId,proto3" json:"ActivityId,omitempty"`
	ProductId            int64    `protobuf:"varint,2,opt,name=ProductId,proto3" json:"ProductId,omitempty"`
	BatchId              int64    `protobuf:"varint,3,opt,name=BatchId,proto3" json:"BatchId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRedEnvelopeDetailListReq) Reset()         { *m = GetRedEnvelopeDetailListReq{} }
func (m *GetRedEnvelopeDetailListReq) String() string { return proto.CompactTextString(m) }
func (*GetRedEnvelopeDetailListReq) ProtoMessage()    {}
func (*GetRedEnvelopeDetailListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_763c21ef7df7fb30, []int{21}
}

func (m *GetRedEnvelopeDetailListReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRedEnvelopeDetailListReq.Unmarshal(m, b)
}
func (m *GetRedEnvelopeDetailListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRedEnvelopeDetailListReq.Marshal(b, m, deterministic)
}
func (m *GetRedEnvelopeDetailListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRedEnvelopeDetailListReq.Merge(m, src)
}
func (m *GetRedEnvelopeDetailListReq) XXX_Size() int {
	return xxx_messageInfo_GetRedEnvelopeDetailListReq.Size(m)
}
func (m *GetRedEnvelopeDetailListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRedEnvelopeDetailListReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetRedEnvelopeDetailListReq proto.InternalMessageInfo

func (m *GetRedEnvelopeDetailListReq) GetActivityId() int64 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

func (m *GetRedEnvelopeDetailListReq) GetProductId() int64 {
	if m != nil {
		return m.ProductId
	}
	return 0
}

func (m *GetRedEnvelopeDetailListReq) GetBatchId() int64 {
	if m != nil {
		return m.BatchId
	}
	return 0
}

//获取小红包奖品列表返回
type GetRedEnvelopeDetailListRsp struct {
	Code                 Code                   `protobuf:"varint,1,opt,name=Code,proto3,enum=Code" json:"Code,omitempty"`
	List                 []*PBRedEnvelopeDetail `protobuf:"bytes,2,rep,name=List,proto3" json:"List,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *GetRedEnvelopeDetailListRsp) Reset()         { *m = GetRedEnvelopeDetailListRsp{} }
func (m *GetRedEnvelopeDetailListRsp) String() string { return proto.CompactTextString(m) }
func (*GetRedEnvelopeDetailListRsp) ProtoMessage()    {}
func (*GetRedEnvelopeDetailListRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_763c21ef7df7fb30, []int{22}
}

func (m *GetRedEnvelopeDetailListRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRedEnvelopeDetailListRsp.Unmarshal(m, b)
}
func (m *GetRedEnvelopeDetailListRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRedEnvelopeDetailListRsp.Marshal(b, m, deterministic)
}
func (m *GetRedEnvelopeDetailListRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRedEnvelopeDetailListRsp.Merge(m, src)
}
func (m *GetRedEnvelopeDetailListRsp) XXX_Size() int {
	return xxx_messageInfo_GetRedEnvelopeDetailListRsp.Size(m)
}
func (m *GetRedEnvelopeDetailListRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRedEnvelopeDetailListRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetRedEnvelopeDetailListRsp proto.InternalMessageInfo

func (m *GetRedEnvelopeDetailListRsp) GetCode() Code {
	if m != nil {
		return m.Code
	}
	return Code_NOT_USE
}

func (m *GetRedEnvelopeDetailListRsp) GetList() []*PBRedEnvelopeDetail {
	if m != nil {
		return m.List
	}
	return nil
}

func init() {
	proto.RegisterEnum("RedEnvelopeBatchStatus", RedEnvelopeBatchStatus_name, RedEnvelopeBatchStatus_value)
	proto.RegisterEnum("RedEnvelopeItemType", RedEnvelopeItemType_name, RedEnvelopeItemType_value)
	proto.RegisterEnum("RedPrizeDeliveriedState", RedPrizeDeliveriedState_name, RedPrizeDeliveriedState_value)
	proto.RegisterType((*PBRedEnvelopeBatch)(nil), "PBRedEnvelopeBatch")
	proto.RegisterType((*PBRedEnvelopeItem)(nil), "PBRedEnvelopeItem")
	proto.RegisterType((*PBRedEnvelopeDetail)(nil), "PBRedEnvelopeDetail")
	proto.RegisterType((*PBRedEnvelopeWinnerRecord)(nil), "PBRedEnvelopeWinnerRecord")
	proto.RegisterType((*GetRedEnvelopeListReq)(nil), "GetRedEnvelopeListReq")
	proto.RegisterType((*GetRedEnvelopeListRsp)(nil), "GetRedEnvelopeListRsp")
	proto.RegisterType((*DeleteRenEnvelopeBatchReq)(nil), "DeleteRenEnvelopeBatchReq")
	proto.RegisterType((*DeleteRedEnvelopeItemReq)(nil), "DeleteRedEnvelopeItemReq")
	proto.RegisterType((*SaveRedEnvelopeItemReq)(nil), "SaveRedEnvelopeItemReq")
	proto.RegisterType((*SaveRedEnvelopeItemRsp)(nil), "SaveRedEnvelopeItemRsp")
	proto.RegisterType((*FixUser)(nil), "FixUser")
	proto.RegisterType((*GetRedEnvelopeBatchByIdReq)(nil), "GetRedEnvelopeBatchByIdReq")
	proto.RegisterType((*GetRedEnvelopeBatchByIdRsp)(nil), "GetRedEnvelopeBatchByIdRsp")
	proto.RegisterType((*SaveRedEnvelopeBatchReq)(nil), "SaveRedEnvelopeBatchReq")
	proto.RegisterType((*SaveRedEnvelopeBatchRsp)(nil), "SaveRedEnvelopeBatchRsp")
	proto.RegisterType((*UpdateRedEnvelopeStateReq)(nil), "UpdateRedEnvelopeStateReq")
	proto.RegisterType((*SaveRedEnvelopeWinnerReq)(nil), "SaveRedEnvelopeWinnerReq")
	proto.RegisterType((*GetRedEnvelopeWinnerListReq)(nil), "GetRedEnvelopeWinnerListReq")
	proto.RegisterType((*GetRedEnvelopeWinnerListRsp)(nil), "GetRedEnvelopeWinnerListRsp")
	proto.RegisterType((*UpdateRedEnvelopeDeliveriedStateReq)(nil), "UpdateRedEnvelopeDeliveriedStateReq")
	proto.RegisterType((*GenerateRedEnvelopeDetailReq)(nil), "GenerateRedEnvelopeDetailReq")
	proto.RegisterType((*GetRedEnvelopeDetailListReq)(nil), "GetRedEnvelopeDetailListReq")
	proto.RegisterType((*GetRedEnvelopeDetailListRsp)(nil), "GetRedEnvelopeDetailListRsp")
}

func init() { proto.RegisterFile("RedEnvelopePrize.proto", fileDescriptor_763c21ef7df7fb30) }

var fileDescriptor_763c21ef7df7fb30 = []byte{
	// 1695 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x59, 0xdd, 0x72, 0xe3, 0x48,
	0x15, 0x46, 0xb6, 0x65, 0x2b, 0x27, 0x99, 0x8c, 0xb7, 0x93, 0x38, 0xb2, 0x36, 0x40, 0x4a, 0x4c,
	0xed, 0xba, 0x86, 0x42, 0x54, 0x0d, 0xb7, 0x14, 0x85, 0x63, 0x3b, 0x46, 0xb3, 0x89, 0xed, 0x6a,
	0x67, 0x66, 0x80, 0x2a, 0x8a, 0xd2, 0x5a, 0x3d, 0x89, 0x0a, 0x47, 0xf2, 0x4a, 0x8a, 0x49, 0x86,
	0x37, 0xe0, 0x0d, 0xf6, 0x12, 0x5e, 0x80, 0x27, 0xe0, 0x29, 0x78, 0x01, 0x6e, 0xb8, 0xe5, 0x9e,
	0x3b, 0xaa, 0x4f, 0xcb, 0xfa, 0xb3, 0xe4, 0x18, 0xc8, 0x30, 0x77, 0x3e, 0xdf, 0x69, 0x75, 0x9f,
	0x3e, 0xfd, 0x7d, 0xa7, 0x4f, 0x27, 0xd0, 0xa2, 0xcc, 0x1e, 0xb8, 0x4b, 0x36, 0xf7, 0x16, 0x6c,
	0xe2, 0x3b, 0x1f, 0x98, 0xb1, 0xf0, 0xbd, 0xd0, 0xd3, 0xf6, 0x7a, 0xde, 0xed, 0xad, 0xe7, 0x0a,
	0x4b, 0xff, 0xb6, 0x02, 0x64, 0x72, 0x96, 0x1a, 0x7a, 0x66, 0x85, 0xb3, 0x1b, 0xb2, 0x0f, 0x15,
	0xd3, 0x56, 0xa5, 0x53, 0xa9, 0x53, 0xa5, 0x15, 0xd3, 0x26, 0xdf, 0x03, 0xe8, 0xce, 0x42, 0x67,
	0xe9, 0x84, 0x0f, 0xa6, 0xad, 0x56, 0x10, 0x4f, 0x21, 0xe4, 0x04, 0x76, 0x26, 0xbe, 0x67, 0xdf,
	0xcd, 0x42, 0xd3, 0x56, 0xab, 0xe8, 0x4e, 0x00, 0xa2, 0x81, 0x32, 0x65, 0xae, 0x7d, 0xe5, 0xdc,
	0x32, 0xb5, 0x86, 0xce, 0xd8, 0x26, 0x3f, 0x02, 0x79, 0x1a, 0x5a, 0x21, 0x53, 0xe5, 0x53, 0xa9,
	0xb3, 0xff, 0xea, 0xd8, 0xc8, 0xc7, 0xc2, 0xbd, 0x77, 0x01, 0x15, 0xa3, 0x88, 0x0e, 0x7b, 0xab,
	0x65, 0x47, 0xd6, 0x2d, 0x53, 0xeb, 0xa7, 0x52, 0x67, 0x87, 0x66, 0x30, 0x1e, 0xcc, 0xd8, 0xbf,
	0xb6, 0x5c, 0xe7, 0x03, 0xf3, 0xd5, 0x06, 0x0e, 0x48, 0x00, 0xd2, 0x01, 0xd9, 0x0c, 0xd9, 0x6d,
	0xa0, 0x2a, 0xa7, 0xd5, 0xce, 0xee, 0x2b, 0x62, 0x64, 0xb6, 0xcf, 0x5d, 0x54, 0x0c, 0xd0, 0xff,
	0x26, 0xc3, 0x67, 0x6b, 0xce, 0x27, 0x4e, 0x8d, 0x0a, 0x0d, 0xdc, 0xa5, 0x69, 0x47, 0x99, 0x59,
	0x99, 0xa4, 0x03, 0xb5, 0xab, 0x87, 0xc5, 0x2a, 0x2f, 0x87, 0x46, 0x2e, 0x0e, 0xee, 0xa3, 0x38,
	0x82, 0x1c, 0x82, 0xdc, 0xf3, 0xee, 0xdc, 0x10, 0x93, 0x21, 0x53, 0x61, 0xf0, 0xb8, 0xae, 0xbc,
	0xd0, 0x9a, 0x5f, 0x7a, 0x2e, 0x7b, 0xc0, 0x34, 0x54, 0x69, 0x0a, 0x21, 0x2d, 0xa8, 0xf7, 0x6e,
	0x2c, 0x77, 0xc6, 0x54, 0x05, 0x3f, 0x8b, 0x2c, 0x11, 0xaf, 0xf3, 0x81, 0x61, 0x7a, 0x77, 0x44,
	0xf6, 0x62, 0x80, 0x9c, 0xc2, 0x2e, 0x1a, 0xe6, 0xed, 0xf5, 0x1b, 0x7f, 0xae, 0x02, 0xfa, 0xd3,
	0x10, 0x3f, 0xec, 0x77, 0x4e, 0x70, 0x73, 0xc5, 0xee, 0x43, 0x75, 0x17, 0xdd, 0xb1, 0xcd, 0xe7,
	0x36, 0x83, 0x73, 0x67, 0x3e, 0x77, 0xdc, 0x6b, 0x75, 0xef, 0x54, 0xea, 0x28, 0x34, 0x01, 0x48,
	0x07, 0x9e, 0xf7, 0xd9, 0xdc, 0x59, 0x32, 0xdf, 0x61, 0xb6, 0x08, 0xfb, 0x19, 0x86, 0x9d, 0x87,
	0xb3, 0x23, 0xc5, 0xde, 0xf7, 0xf3, 0x23, 0x45, 0x16, 0x4e, 0x60, 0xe7, 0x82, 0x2d, 0xd9, 0x1c,
	0x77, 0xf3, 0x5c, 0xec, 0x26, 0x06, 0xc8, 0x4b, 0x68, 0x9a, 0xc1, 0x74, 0xc1, 0x66, 0x8e, 0x35,
	0x1f, 0xbc, 0x7f, 0xcf, 0x66, 0x61, 0xa0, 0x36, 0x31, 0xac, 0x35, 0x3c, 0xce, 0x4b, 0x9f, 0x05,
	0x33, 0xf5, 0xb3, 0x54, 0x5e, 0x38, 0x40, 0xbe, 0x80, 0xfd, 0x09, 0xf3, 0xdf, 0x39, 0xae, 0xcb,
	0x7c, 0x11, 0x10, 0xc1, 0xac, 0xe6, 0x50, 0xf2, 0x02, 0x94, 0x73, 0xe7, 0xfe, 0x4d, 0xc0, 0xfc,
	0x40, 0x3d, 0x40, 0x02, 0x2a, 0x46, 0x04, 0xd0, 0xd8, 0xc3, 0xcf, 0xee, 0xd2, 0x71, 0xa7, 0x9e,
	0x1f, 0x8e, 0xee, 0x6e, 0xd5, 0x43, 0x9c, 0x29, 0x85, 0xa0, 0xdf, 0xba, 0x5f, 0xf9, 0x8f, 0x22,
	0x7f, 0x8c, 0xf0, 0x33, 0xa0, 0xce, 0xf5, 0x0d, 0x7a, 0x5b, 0xe8, 0x8d, 0x6d, 0xfd, 0x5f, 0x35,
	0x38, 0xc8, 0xb0, 0xba, 0xcf, 0x42, 0xcb, 0x99, 0xff, 0xdf, 0x78, 0xdd, 0x82, 0x3a, 0xe7, 0xaf,
	0x69, 0x23, 0xb3, 0xab, 0x34, 0xb2, 0x62, 0xbe, 0xd7, 0x1f, 0xe5, 0x7b, 0x9a, 0x61, 0x8d, 0x1c,
	0xc3, 0x0e, 0x41, 0x16, 0xcc, 0x51, 0x70, 0x72, 0x61, 0x3c, 0xc2, 0x69, 0x1d, 0xf6, 0xcc, 0x20,
	0x21, 0x0e, 0x92, 0x5a, 0xa1, 0x19, 0x4c, 0x30, 0x97, 0xb2, 0x99, 0xb3, 0x64, 0x36, 0xd2, 0x1a,
	0x99, 0x1b, 0x01, 0x59, 0x96, 0xed, 0x6d, 0xc3, 0xb2, 0x67, 0xdb, 0xb0, 0x6c, 0xff, 0xbf, 0x65,
	0x99, 0x0a, 0x0d, 0x2e, 0xab, 0x7b, 0x66, 0xab, 0x07, 0xb8, 0xd0, 0xca, 0xcc, 0xeb, 0xf7, 0x70,
	0x5d, 0xbf, 0x59, 0xee, 0x1d, 0x3d, 0xc2, 0xbd, 0xd6, 0x46, 0xee, 0x1d, 0xe7, 0xb8, 0xf7, 0x6d,
	0x1d, 0xda, 0x19, 0xee, 0x89, 0xa0, 0x29, 0x9b, 0x79, 0xbe, 0xfd, 0xc9, 0x19, 0xa8, 0x81, 0x22,
	0xb4, 0x60, 0xda, 0xc8, 0xc2, 0x2a, 0x8d, 0xed, 0x98, 0x9d, 0x8d, 0x6d, 0xaa, 0xf1, 0x7f, 0xcc,
	0xc0, 0x7d, 0xa8, 0x4c, 0x47, 0x51, 0x31, 0xad, 0x4c, 0x47, 0x3c, 0x42, 0x5e, 0x08, 0x4c, 0x41,
	0xb5, 0x2a, 0x8d, 0x2c, 0x1e, 0x21, 0xff, 0x95, 0xa2, 0x59, 0x6c, 0xf3, 0x6c, 0xf1, 0xdf, 0xdd,
	0xa5, 0x15, 0x5a, 0x3e, 0xf2, 0x6b, 0x87, 0xa6, 0x90, 0x95, 0x7f, 0xbc, 0x60, 0xae, 0x69, 0x47,
	0xd4, 0x4a, 0x21, 0xdc, 0x2f, 0xe8, 0x8c, 0xd7, 0xf4, 0x73, 0x91, 0xed, 0x04, 0xe1, 0xcc, 0x49,
	0x2c, 0x51, 0x26, 0x65, 0x9a, 0x86, 0xb8, 0x8e, 0xce, 0x2d, 0x67, 0xce, 0x6c, 0xca, 0xac, 0xc0,
	0x73, 0xa3, 0x22, 0x99, 0xc1, 0x50, 0xbb, 0xbf, 0xec, 0x2e, 0x16, 0x5f, 0xb1, 0x07, 0xe4, 0x2e,
	0xd7, 0x6e, 0x64, 0xf3, 0x1c, 0x5d, 0xf6, 0x7e, 0x71, 0xe6, 0xcc, 0xe7, 0x23, 0x0f, 0x79, 0xbb,
	0x43, 0x13, 0x80, 0x7b, 0x7b, 0x3e, 0xb3, 0x42, 0x66, 0x77, 0x43, 0xe4, 0x6d, 0x95, 0x26, 0x40,
	0x56, 0x81, 0x47, 0xdb, 0x28, 0xb0, 0xb5, 0x8d, 0x02, 0x8f, 0xf3, 0x0a, 0x3c, 0x04, 0x79, 0x72,
	0xe3, 0xb9, 0x4c, 0x55, 0xd1, 0x23, 0x8c, 0xbc, 0xaa, 0xda, 0xeb, 0xaa, 0xc2, 0x11, 0x48, 0x4d,
	0x8c, 0x50, 0x5b, 0x8d, 0x88, 0x21, 0xfd, 0x0f, 0x70, 0x34, 0x64, 0x61, 0x8a, 0x57, 0x17, 0x4e,
	0x10, 0x52, 0xf6, 0x4d, 0x4e, 0x06, 0xd2, 0x66, 0x19, 0x54, 0xf2, 0x32, 0x78, 0x01, 0xcf, 0xcc,
	0xa0, 0xe7, 0xb9, 0x21, 0x73, 0x43, 0xce, 0x54, 0x14, 0x8a, 0x42, 0xb3, 0xa0, 0xfe, 0x27, 0xa9,
	0x70, 0xf5, 0x60, 0x41, 0xda, 0x50, 0xeb, 0x79, 0x36, 0xc3, 0x75, 0xf7, 0x5f, 0xc9, 0x06, 0x37,
	0x28, 0x42, 0xe4, 0x4b, 0xa8, 0xf1, 0x51, 0x6a, 0x05, 0xef, 0xb1, 0x03, 0x63, 0xbd, 0x8f, 0xa4,
	0x38, 0x60, 0x75, 0xed, 0xe3, 0xe5, 0x16, 0xad, 0x9f, 0x00, 0xbc, 0xa8, 0x99, 0xc1, 0xd8, 0x9d,
	0x3f, 0x8c, 0x5d, 0xf1, 0x15, 0xea, 0x55, 0xa1, 0x39, 0x54, 0x0f, 0xa0, 0xdd, 0x67, 0x73, 0x16,
	0x32, 0xca, 0xdc, 0xec, 0x2a, 0xff, 0x73, 0x92, 0x52, 0xb5, 0xa2, 0x9a, 0xa9, 0x15, 0xfa, 0x1f,
	0x25, 0x50, 0x57, 0xab, 0x66, 0x9b, 0xc4, 0x8f, 0xb7, 0x68, 0xaa, 0x40, 0xd5, 0xd2, 0x05, 0x4a,
	0xff, 0x39, 0xb4, 0xa6, 0xd6, 0xb2, 0x28, 0x92, 0x2f, 0xa0, 0x66, 0xba, 0xef, 0x3d, 0x8c, 0xa1,
	0xb8, 0xa7, 0x45, 0xbf, 0xfe, 0x55, 0xf1, 0x0c, 0x9b, 0xcf, 0x39, 0x09, 0xa7, 0x92, 0x09, 0xe7,
	0xaf, 0x12, 0x34, 0x56, 0x87, 0xf8, 0xa9, 0x6b, 0x77, 0x52, 0x31, 0xeb, 0xa5, 0x15, 0xb3, 0x91,
	0xad, 0x98, 0x7a, 0x08, 0x5a, 0x96, 0xf3, 0xb8, 0xc8, 0xd9, 0x83, 0x69, 0x7f, 0x4c, 0x46, 0xd9,
	0xe5, 0xab, 0x6e, 0x3e, 0x86, 0x1f, 0x42, 0x5d, 0x5c, 0x47, 0xb8, 0x5a, 0x89, 0xe0, 0xa2, 0x21,
	0xfa, 0x19, 0x1c, 0xe7, 0x0e, 0x3a, 0x96, 0xca, 0x97, 0x19, 0xae, 0x14, 0xcb, 0x16, 0xc9, 0x32,
	0x2a, 0x99, 0x63, 0x73, 0x98, 0xa9, 0x9d, 0x57, 0xb2, 0x3b, 0xff, 0xb3, 0x04, 0xed, 0x37, 0x0b,
	0xdb, 0xca, 0x68, 0x09, 0x9f, 0x75, 0x1f, 0x53, 0x4c, 0xf1, 0x03, 0xb3, 0xb6, 0xcd, 0x03, 0x53,
	0x7f, 0x0d, 0x6a, 0x6e, 0xd3, 0xab, 0x1e, 0xe5, 0x1b, 0x62, 0x44, 0x05, 0x4f, 0xc2, 0x82, 0xa7,
	0x19, 0xa5, 0xad, 0x8c, 0xa8, 0x7b, 0xfa, 0x3f, 0x2a, 0xf0, 0x79, 0xf6, 0xac, 0xc5, 0xa0, 0xa7,
	0xa9, 0xec, 0x1a, 0x28, 0x13, 0xeb, 0x9a, 0x4d, 0x9d, 0x0f, 0x0c, 0xf7, 0x2c, 0xd3, 0xd8, 0xc6,
	0x2f, 0xad, 0x6b, 0x66, 0xba, 0x36, 0xbb, 0xc7, 0x8d, 0xcb, 0x34, 0x01, 0xd2, 0xc9, 0x92, 0xd7,
	0xe4, 0x75, 0x6e, 0xb9, 0x41, 0x22, 0x23, 0x61, 0x45, 0x0d, 0x4a, 0x23, 0x6e, 0x50, 0xf0, 0xaa,
	0x77, 0x83, 0x91, 0x33, 0xfb, 0x1d, 0x4a, 0x4b, 0x59, 0x5d, 0xf5, 0x09, 0xf6, 0x48, 0xcb, 0x13,
	0x5f, 0xa4, 0x90, 0xbe, 0x48, 0x5b, 0x50, 0x9f, 0x32, 0xcb, 0x9f, 0xdd, 0x44, 0x4f, 0xc7, 0xc8,
	0x8a, 0xe7, 0xc2, 0x1e, 0x6c, 0x2f, 0xda, 0xcf, 0x0a, 0xd0, 0xff, 0x2e, 0x6d, 0xc8, 0xf3, 0x66,
	0xb6, 0x9e, 0xc0, 0x0e, 0xbe, 0x89, 0x79, 0x72, 0x30, 0xc5, 0x32, 0x4d, 0x80, 0xf8, 0x0d, 0x2d,
	0x7a, 0x6d, 0x91, 0xe4, 0x14, 0x92, 0x39, 0x82, 0xda, 0xa6, 0x23, 0x90, 0xf3, 0x47, 0xb0, 0xa2,
	0x52, 0x7d, 0x4b, 0x2a, 0xfd, 0x45, 0x82, 0x1f, 0xac, 0x69, 0x27, 0x79, 0x9f, 0x3c, 0x91, 0x8a,
	0x78, 0xef, 0x8e, 0xab, 0xc6, 0x32, 0x8a, 0x6d, 0x62, 0x64, 0x75, 0xa4, 0x72, 0x1d, 0x45, 0x7d,
	0x51, 0x36, 0x8a, 0x48, 0x48, 0x4b, 0x38, 0x19, 0x32, 0x97, 0xf9, 0xf9, 0x90, 0x79, 0x79, 0xfa,
	0x98, 0xf5, 0xf5, 0x2e, 0xcf, 0x05, 0xb1, 0xe4, 0xd3, 0x68, 0xae, 0x7c, 0xd9, 0xaf, 0x37, 0x2c,
	0xbb, 0x99, 0x82, 0x9d, 0x4c, 0x1b, 0x75, 0x68, 0x14, 0x3c, 0xce, 0x05, 0x09, 0x5e, 0x9e, 0x67,
	0xfe, 0xa8, 0x97, 0x2a, 0x5e, 0xa4, 0x01, 0xd5, 0xee, 0xc5, 0x45, 0xf3, 0x3b, 0x44, 0x81, 0xda,
	0xbb, 0xae, 0x79, 0xd5, 0x94, 0xc8, 0x2e, 0x34, 0x26, 0x17, 0xdd, 0x5f, 0x99, 0xa3, 0x61, 0xb3,
	0x42, 0xf6, 0x40, 0x19, 0x76, 0x2f, 0x07, 0xe3, 0xb7, 0x03, 0xda, 0xac, 0xbe, 0xa4, 0x70, 0x50,
	0xf0, 0x7e, 0xe1, 0x5f, 0x0c, 0x07, 0x57, 0xbf, 0x15, 0x13, 0xed, 0x42, 0xa3, 0xfb, 0x76, 0x40,
	0xbb, 0xc3, 0x41, 0x53, 0x22, 0x00, 0x75, 0xda, 0x1d, 0xf5, 0xc7, 0x97, 0xcd, 0x0a, 0xff, 0x3d,
	0x3e, 0x7b, 0x3d, 0xe8, 0x5d, 0x35, 0xab, 0x64, 0x07, 0xe4, 0x21, 0x1d, 0xbf, 0x99, 0x34, 0x6b,
	0x2f, 0x7f, 0x0c, 0xc7, 0x25, 0x84, 0xe0, 0x5f, 0x8c, 0xc6, 0xd3, 0xc1, 0xa8, 0x2f, 0xe2, 0xc3,
	0x5f, 0xd2, 0xab, 0x7f, 0x36, 0xf0, 0x8b, 0xcc, 0x9f, 0x28, 0xa7, 0xcc, 0x5f, 0x3a, 0x33, 0x46,
	0xfa, 0x40, 0xd6, 0xbb, 0x51, 0xd2, 0x32, 0x0a, 0x1b, 0x64, 0xad, 0x10, 0x0f, 0x16, 0xe4, 0x35,
	0x1c, 0x16, 0xdd, 0x5f, 0x44, 0x35, 0x4a, 0xae, 0x46, 0xad, 0xc4, 0x13, 0x2c, 0xc8, 0xcf, 0xa0,
	0x55, 0x7c, 0x75, 0x11, 0xcd, 0x28, 0xbd, 0xd3, 0x34, 0x45, 0x9c, 0x73, 0xb0, 0x20, 0x3f, 0x85,
	0xa3, 0xc2, 0x6b, 0x85, 0xb4, 0x8d, 0xb2, 0xeb, 0x26, 0xf5, 0xf5, 0x5b, 0x50, 0xcb, 0xea, 0x1b,
	0x39, 0x31, 0x36, 0x5c, 0x31, 0xda, 0x06, 0x6f, 0xb0, 0x20, 0x53, 0x38, 0x2e, 0xe9, 0x45, 0xc8,
	0xe7, 0x46, 0x79, 0x6f, 0xa4, 0x95, 0x3b, 0x45, 0xaa, 0x8a, 0xfb, 0x74, 0xa2, 0x19, 0xa5, 0x0d,
	0x7c, 0x6a, 0xb3, 0x43, 0x38, 0x28, 0xe8, 0x51, 0xc9, 0xb1, 0x51, 0xdc, 0xfb, 0x6a, 0xc5, 0x0e,
	0x91, 0xf3, 0xc2, 0xd6, 0x9d, 0xb4, 0x8d, 0xb2, 0x96, 0x3e, 0x15, 0x06, 0x85, 0xd3, 0xc7, 0x0a,
	0x2e, 0x79, 0x61, 0x6c, 0x51, 0x93, 0x53, 0x73, 0xf6, 0xa1, 0x5d, 0x5a, 0x13, 0xc9, 0x77, 0x8d,
	0x4d, 0xf5, 0x72, 0x13, 0x1b, 0x92, 0x52, 0xb3, 0xc6, 0x86, 0x4c, 0xf1, 0xd3, 0x36, 0x78, 0x83,
	0x05, 0xf9, 0x0d, 0x7c, 0x7f, 0xc8, 0xc2, 0x89, 0xcf, 0x96, 0x0e, 0xfb, 0xfd, 0x93, 0x4f, 0x7f,
	0x46, 0x7e, 0xdd, 0xf4, 0x99, 0xcd, 0x22, 0xdf, 0x82, 0xeb, 0xfd, 0xeb, 0x3a, 0xfe, 0x17, 0xe2,
	0x27, 0xff, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x4b, 0xed, 0xb0, 0x40, 0xad, 0x18, 0x00, 0x00,
}

// This following code was generated by tarsrpc
// Gernerated from RedEnvelopePrize.proto
type RedEnvelopePrizeService struct {
	s model.Servant
}

//SetServant is required by the servant interface.
func (obj *RedEnvelopePrizeService) SetServant(s model.Servant) {
	obj.s = s
}

//AddServant is required by the servant interface
func (obj *RedEnvelopePrizeService) AddServant(imp impRedEnvelopePrizeService, objStr string) {
	tars.AddServant(obj, imp, objStr)
}

////AddServant adds servant  for the service with context
func (obj *RedEnvelopePrizeService) AddServantWithContext(imp impRedEnvelopePrizeServiceWithContext, objStr string) {
	tars.AddServantWithContext(obj, imp, objStr)
}

//TarsSetTimeout is required by the servant interface. t is the timeout in ms.
func (obj *RedEnvelopePrizeService) TarsSetTimeout(t int) {
	obj.s.TarsSetTimeout(t)
}

//TarsSetProtocol is required by the servant interface. t is the protocol.
func (obj *RedEnvelopePrizeService) TarsSetProtocol(p model.Protocol) {
	obj.s.TarsSetProtocol(p)
}

type impRedEnvelopePrizeService interface {
	GetRedEnvelopeList(input GetRedEnvelopeListReq) (output GetRedEnvelopeListRsp, err error)
	SaveRedEnvelopeBatch(input SaveRedEnvelopeBatchReq) (output SaveRedEnvelopeBatchRsp, err error)
	UpdateRedEnvelopeState(input UpdateRedEnvelopeStateReq) (output CodeRsp, err error)
	SaveRedEnvelopeWinner(input SaveRedEnvelopeWinnerReq) (output CodeRsp, err error)
	GetRedEnvelopeWinnerList(input GetRedEnvelopeWinnerListReq) (output GetRedEnvelopeWinnerListRsp, err error)
	GetRedEnvelopeBatchById(input GetRedEnvelopeBatchByIdReq) (output GetRedEnvelopeBatchByIdRsp, err error)
	DeleteRenEnvelopeBatch(input DeleteRenEnvelopeBatchReq) (output CodeRsp, err error)
	SaveRedEnvelopeItem(input SaveRedEnvelopeItemReq) (output SaveRedEnvelopeItemRsp, err error)
	DeleteRedEnvelopeItem(input DeleteRedEnvelopeItemReq) (output CodeRsp, err error)
	UpdateRedEnvelopeDeliveriedState(input UpdateRedEnvelopeDeliveriedStateReq) (output CodeRsp, err error)
	GenerateRedEnvelopeDetail(input GenerateRedEnvelopeDetailReq) (output CodeRsp, err error)
	GetRedEnvelopeDetailList(input GetRedEnvelopeDetailListReq) (output GetRedEnvelopeDetailListRsp, err error)
	GetPreviewRedEnvelopeDetailList(input GetRedEnvelopeDetailListReq) (output GetRedEnvelopeDetailListRsp, err error)
}

type impRedEnvelopePrizeServiceWithContext interface {
	GetRedEnvelopeList(ctx context.Context, input GetRedEnvelopeListReq) (output GetRedEnvelopeListRsp, err error)
	SaveRedEnvelopeBatch(ctx context.Context, input SaveRedEnvelopeBatchReq) (output SaveRedEnvelopeBatchRsp, err error)
	UpdateRedEnvelopeState(ctx context.Context, input UpdateRedEnvelopeStateReq) (output CodeRsp, err error)
	SaveRedEnvelopeWinner(ctx context.Context, input SaveRedEnvelopeWinnerReq) (output CodeRsp, err error)
	GetRedEnvelopeWinnerList(ctx context.Context, input GetRedEnvelopeWinnerListReq) (output GetRedEnvelopeWinnerListRsp, err error)
	GetRedEnvelopeBatchById(ctx context.Context, input GetRedEnvelopeBatchByIdReq) (output GetRedEnvelopeBatchByIdRsp, err error)
	DeleteRenEnvelopeBatch(ctx context.Context, input DeleteRenEnvelopeBatchReq) (output CodeRsp, err error)
	SaveRedEnvelopeItem(ctx context.Context, input SaveRedEnvelopeItemReq) (output SaveRedEnvelopeItemRsp, err error)
	DeleteRedEnvelopeItem(ctx context.Context, input DeleteRedEnvelopeItemReq) (output CodeRsp, err error)
	UpdateRedEnvelopeDeliveriedState(ctx context.Context, input UpdateRedEnvelopeDeliveriedStateReq) (output CodeRsp, err error)
	GenerateRedEnvelopeDetail(ctx context.Context, input GenerateRedEnvelopeDetailReq) (output CodeRsp, err error)
	GetRedEnvelopeDetailList(ctx context.Context, input GetRedEnvelopeDetailListReq) (output GetRedEnvelopeDetailListRsp, err error)
	GetPreviewRedEnvelopeDetailList(ctx context.Context, input GetRedEnvelopeDetailListReq) (output GetRedEnvelopeDetailListRsp, err error)
}

//Dispatch is used to call the user implement of the defined method.
func (obj *RedEnvelopePrizeService) Dispatch(ctx context.Context, val interface{}, req *requestf.RequestPacket, resp *requestf.ResponsePacket, withContext bool) (err error) {
	input := tools.Int8ToByte(req.SBuffer)
	var output []byte
	funcName := req.SFuncName
	switch funcName {

	case "GetRedEnvelopeList":
		inputDefine := GetRedEnvelopeListReq{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res GetRedEnvelopeListRsp
		if withContext == false {
			imp := val.(impRedEnvelopePrizeService)
			res, err = imp.GetRedEnvelopeList(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impRedEnvelopePrizeServiceWithContext)
			res, err = imp.GetRedEnvelopeList(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "SaveRedEnvelopeBatch":
		inputDefine := SaveRedEnvelopeBatchReq{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res SaveRedEnvelopeBatchRsp
		if withContext == false {
			imp := val.(impRedEnvelopePrizeService)
			res, err = imp.SaveRedEnvelopeBatch(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impRedEnvelopePrizeServiceWithContext)
			res, err = imp.SaveRedEnvelopeBatch(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "UpdateRedEnvelopeState":
		inputDefine := UpdateRedEnvelopeStateReq{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res CodeRsp
		if withContext == false {
			imp := val.(impRedEnvelopePrizeService)
			res, err = imp.UpdateRedEnvelopeState(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impRedEnvelopePrizeServiceWithContext)
			res, err = imp.UpdateRedEnvelopeState(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "SaveRedEnvelopeWinner":
		inputDefine := SaveRedEnvelopeWinnerReq{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res CodeRsp
		if withContext == false {
			imp := val.(impRedEnvelopePrizeService)
			res, err = imp.SaveRedEnvelopeWinner(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impRedEnvelopePrizeServiceWithContext)
			res, err = imp.SaveRedEnvelopeWinner(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "GetRedEnvelopeWinnerList":
		inputDefine := GetRedEnvelopeWinnerListReq{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res GetRedEnvelopeWinnerListRsp
		if withContext == false {
			imp := val.(impRedEnvelopePrizeService)
			res, err = imp.GetRedEnvelopeWinnerList(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impRedEnvelopePrizeServiceWithContext)
			res, err = imp.GetRedEnvelopeWinnerList(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "GetRedEnvelopeBatchById":
		inputDefine := GetRedEnvelopeBatchByIdReq{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res GetRedEnvelopeBatchByIdRsp
		if withContext == false {
			imp := val.(impRedEnvelopePrizeService)
			res, err = imp.GetRedEnvelopeBatchById(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impRedEnvelopePrizeServiceWithContext)
			res, err = imp.GetRedEnvelopeBatchById(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "DeleteRenEnvelopeBatch":
		inputDefine := DeleteRenEnvelopeBatchReq{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res CodeRsp
		if withContext == false {
			imp := val.(impRedEnvelopePrizeService)
			res, err = imp.DeleteRenEnvelopeBatch(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impRedEnvelopePrizeServiceWithContext)
			res, err = imp.DeleteRenEnvelopeBatch(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "SaveRedEnvelopeItem":
		inputDefine := SaveRedEnvelopeItemReq{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res SaveRedEnvelopeItemRsp
		if withContext == false {
			imp := val.(impRedEnvelopePrizeService)
			res, err = imp.SaveRedEnvelopeItem(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impRedEnvelopePrizeServiceWithContext)
			res, err = imp.SaveRedEnvelopeItem(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "DeleteRedEnvelopeItem":
		inputDefine := DeleteRedEnvelopeItemReq{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res CodeRsp
		if withContext == false {
			imp := val.(impRedEnvelopePrizeService)
			res, err = imp.DeleteRedEnvelopeItem(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impRedEnvelopePrizeServiceWithContext)
			res, err = imp.DeleteRedEnvelopeItem(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "UpdateRedEnvelopeDeliveriedState":
		inputDefine := UpdateRedEnvelopeDeliveriedStateReq{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res CodeRsp
		if withContext == false {
			imp := val.(impRedEnvelopePrizeService)
			res, err = imp.UpdateRedEnvelopeDeliveriedState(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impRedEnvelopePrizeServiceWithContext)
			res, err = imp.UpdateRedEnvelopeDeliveriedState(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "GenerateRedEnvelopeDetail":
		inputDefine := GenerateRedEnvelopeDetailReq{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res CodeRsp
		if withContext == false {
			imp := val.(impRedEnvelopePrizeService)
			res, err = imp.GenerateRedEnvelopeDetail(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impRedEnvelopePrizeServiceWithContext)
			res, err = imp.GenerateRedEnvelopeDetail(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "GetRedEnvelopeDetailList":
		inputDefine := GetRedEnvelopeDetailListReq{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res GetRedEnvelopeDetailListRsp
		if withContext == false {
			imp := val.(impRedEnvelopePrizeService)
			res, err = imp.GetRedEnvelopeDetailList(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impRedEnvelopePrizeServiceWithContext)
			res, err = imp.GetRedEnvelopeDetailList(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "GetPreviewRedEnvelopeDetailList":
		inputDefine := GetRedEnvelopeDetailListReq{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res GetRedEnvelopeDetailListRsp
		if withContext == false {
			imp := val.(impRedEnvelopePrizeService)
			res, err = imp.GetPreviewRedEnvelopeDetailList(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impRedEnvelopePrizeServiceWithContext)
			res, err = imp.GetPreviewRedEnvelopeDetailList(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	default:
		return fmt.Errorf("func mismatch")
	}
	var _status map[string]string
	s, ok := current.GetResponseStatus(ctx)
	if ok && s != nil {
		_status = s
	}
	var _context map[string]string
	c, ok := current.GetResponseContext(ctx)
	if ok && c != nil {
		_context = c
	}
	*resp = requestf.ResponsePacket{
		IVersion:     1,
		CPacketType:  0,
		IRequestId:   req.IRequestId,
		IMessageType: 0,
		IRet:         0,
		SBuffer:      tools.ByteToInt8(output),
		Status:       _status,
		SResultDesc:  "",
		Context:      _context,
	}
	return nil
}

// GetRedEnvelopeList is client rpc method as defined
func (obj *RedEnvelopePrizeService) GetRedEnvelopeList(input GetRedEnvelopeListReq, _opt ...map[string]string) (output GetRedEnvelopeListRsp, err error) {
	ctx := context.Background()
	return obj.GetRedEnvelopeListWithContext(ctx, input, _opt...)
}

// GetRedEnvelopeListWithContext is client rpc method as defined
func (obj *RedEnvelopePrizeService) GetRedEnvelopeListWithContext(ctx context.Context, input GetRedEnvelopeListReq, _opt ...map[string]string) (output GetRedEnvelopeListRsp, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "GetRedEnvelopeList", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// SaveRedEnvelopeBatch is client rpc method as defined
func (obj *RedEnvelopePrizeService) SaveRedEnvelopeBatch(input SaveRedEnvelopeBatchReq, _opt ...map[string]string) (output SaveRedEnvelopeBatchRsp, err error) {
	ctx := context.Background()
	return obj.SaveRedEnvelopeBatchWithContext(ctx, input, _opt...)
}

// SaveRedEnvelopeBatchWithContext is client rpc method as defined
func (obj *RedEnvelopePrizeService) SaveRedEnvelopeBatchWithContext(ctx context.Context, input SaveRedEnvelopeBatchReq, _opt ...map[string]string) (output SaveRedEnvelopeBatchRsp, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "SaveRedEnvelopeBatch", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// UpdateRedEnvelopeState is client rpc method as defined
func (obj *RedEnvelopePrizeService) UpdateRedEnvelopeState(input UpdateRedEnvelopeStateReq, _opt ...map[string]string) (output CodeRsp, err error) {
	ctx := context.Background()
	return obj.UpdateRedEnvelopeStateWithContext(ctx, input, _opt...)
}

// UpdateRedEnvelopeStateWithContext is client rpc method as defined
func (obj *RedEnvelopePrizeService) UpdateRedEnvelopeStateWithContext(ctx context.Context, input UpdateRedEnvelopeStateReq, _opt ...map[string]string) (output CodeRsp, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "UpdateRedEnvelopeState", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// SaveRedEnvelopeWinner is client rpc method as defined
func (obj *RedEnvelopePrizeService) SaveRedEnvelopeWinner(input SaveRedEnvelopeWinnerReq, _opt ...map[string]string) (output CodeRsp, err error) {
	ctx := context.Background()
	return obj.SaveRedEnvelopeWinnerWithContext(ctx, input, _opt...)
}

// SaveRedEnvelopeWinnerWithContext is client rpc method as defined
func (obj *RedEnvelopePrizeService) SaveRedEnvelopeWinnerWithContext(ctx context.Context, input SaveRedEnvelopeWinnerReq, _opt ...map[string]string) (output CodeRsp, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "SaveRedEnvelopeWinner", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// GetRedEnvelopeWinnerList is client rpc method as defined
func (obj *RedEnvelopePrizeService) GetRedEnvelopeWinnerList(input GetRedEnvelopeWinnerListReq, _opt ...map[string]string) (output GetRedEnvelopeWinnerListRsp, err error) {
	ctx := context.Background()
	return obj.GetRedEnvelopeWinnerListWithContext(ctx, input, _opt...)
}

// GetRedEnvelopeWinnerListWithContext is client rpc method as defined
func (obj *RedEnvelopePrizeService) GetRedEnvelopeWinnerListWithContext(ctx context.Context, input GetRedEnvelopeWinnerListReq, _opt ...map[string]string) (output GetRedEnvelopeWinnerListRsp, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "GetRedEnvelopeWinnerList", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// GetRedEnvelopeBatchById is client rpc method as defined
func (obj *RedEnvelopePrizeService) GetRedEnvelopeBatchById(input GetRedEnvelopeBatchByIdReq, _opt ...map[string]string) (output GetRedEnvelopeBatchByIdRsp, err error) {
	ctx := context.Background()
	return obj.GetRedEnvelopeBatchByIdWithContext(ctx, input, _opt...)
}

// GetRedEnvelopeBatchByIdWithContext is client rpc method as defined
func (obj *RedEnvelopePrizeService) GetRedEnvelopeBatchByIdWithContext(ctx context.Context, input GetRedEnvelopeBatchByIdReq, _opt ...map[string]string) (output GetRedEnvelopeBatchByIdRsp, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "GetRedEnvelopeBatchById", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// DeleteRenEnvelopeBatch is client rpc method as defined
func (obj *RedEnvelopePrizeService) DeleteRenEnvelopeBatch(input DeleteRenEnvelopeBatchReq, _opt ...map[string]string) (output CodeRsp, err error) {
	ctx := context.Background()
	return obj.DeleteRenEnvelopeBatchWithContext(ctx, input, _opt...)
}

// DeleteRenEnvelopeBatchWithContext is client rpc method as defined
func (obj *RedEnvelopePrizeService) DeleteRenEnvelopeBatchWithContext(ctx context.Context, input DeleteRenEnvelopeBatchReq, _opt ...map[string]string) (output CodeRsp, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "DeleteRenEnvelopeBatch", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// SaveRedEnvelopeItem is client rpc method as defined
func (obj *RedEnvelopePrizeService) SaveRedEnvelopeItem(input SaveRedEnvelopeItemReq, _opt ...map[string]string) (output SaveRedEnvelopeItemRsp, err error) {
	ctx := context.Background()
	return obj.SaveRedEnvelopeItemWithContext(ctx, input, _opt...)
}

// SaveRedEnvelopeItemWithContext is client rpc method as defined
func (obj *RedEnvelopePrizeService) SaveRedEnvelopeItemWithContext(ctx context.Context, input SaveRedEnvelopeItemReq, _opt ...map[string]string) (output SaveRedEnvelopeItemRsp, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "SaveRedEnvelopeItem", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// DeleteRedEnvelopeItem is client rpc method as defined
func (obj *RedEnvelopePrizeService) DeleteRedEnvelopeItem(input DeleteRedEnvelopeItemReq, _opt ...map[string]string) (output CodeRsp, err error) {
	ctx := context.Background()
	return obj.DeleteRedEnvelopeItemWithContext(ctx, input, _opt...)
}

// DeleteRedEnvelopeItemWithContext is client rpc method as defined
func (obj *RedEnvelopePrizeService) DeleteRedEnvelopeItemWithContext(ctx context.Context, input DeleteRedEnvelopeItemReq, _opt ...map[string]string) (output CodeRsp, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "DeleteRedEnvelopeItem", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// UpdateRedEnvelopeDeliveriedState is client rpc method as defined
func (obj *RedEnvelopePrizeService) UpdateRedEnvelopeDeliveriedState(input UpdateRedEnvelopeDeliveriedStateReq, _opt ...map[string]string) (output CodeRsp, err error) {
	ctx := context.Background()
	return obj.UpdateRedEnvelopeDeliveriedStateWithContext(ctx, input, _opt...)
}

// UpdateRedEnvelopeDeliveriedStateWithContext is client rpc method as defined
func (obj *RedEnvelopePrizeService) UpdateRedEnvelopeDeliveriedStateWithContext(ctx context.Context, input UpdateRedEnvelopeDeliveriedStateReq, _opt ...map[string]string) (output CodeRsp, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "UpdateRedEnvelopeDeliveriedState", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// GenerateRedEnvelopeDetail is client rpc method as defined
func (obj *RedEnvelopePrizeService) GenerateRedEnvelopeDetail(input GenerateRedEnvelopeDetailReq, _opt ...map[string]string) (output CodeRsp, err error) {
	ctx := context.Background()
	return obj.GenerateRedEnvelopeDetailWithContext(ctx, input, _opt...)
}

// GenerateRedEnvelopeDetailWithContext is client rpc method as defined
func (obj *RedEnvelopePrizeService) GenerateRedEnvelopeDetailWithContext(ctx context.Context, input GenerateRedEnvelopeDetailReq, _opt ...map[string]string) (output CodeRsp, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "GenerateRedEnvelopeDetail", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// GetRedEnvelopeDetailList is client rpc method as defined
func (obj *RedEnvelopePrizeService) GetRedEnvelopeDetailList(input GetRedEnvelopeDetailListReq, _opt ...map[string]string) (output GetRedEnvelopeDetailListRsp, err error) {
	ctx := context.Background()
	return obj.GetRedEnvelopeDetailListWithContext(ctx, input, _opt...)
}

// GetRedEnvelopeDetailListWithContext is client rpc method as defined
func (obj *RedEnvelopePrizeService) GetRedEnvelopeDetailListWithContext(ctx context.Context, input GetRedEnvelopeDetailListReq, _opt ...map[string]string) (output GetRedEnvelopeDetailListRsp, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "GetRedEnvelopeDetailList", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// GetPreviewRedEnvelopeDetailList is client rpc method as defined
func (obj *RedEnvelopePrizeService) GetPreviewRedEnvelopeDetailList(input GetRedEnvelopeDetailListReq, _opt ...map[string]string) (output GetRedEnvelopeDetailListRsp, err error) {
	ctx := context.Background()
	return obj.GetPreviewRedEnvelopeDetailListWithContext(ctx, input, _opt...)
}

// GetPreviewRedEnvelopeDetailListWithContext is client rpc method as defined
func (obj *RedEnvelopePrizeService) GetPreviewRedEnvelopeDetailListWithContext(ctx context.Context, input GetRedEnvelopeDetailListReq, _opt ...map[string]string) (output GetRedEnvelopeDetailListRsp, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "GetPreviewRedEnvelopeDetailList", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

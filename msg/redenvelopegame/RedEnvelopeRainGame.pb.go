// Code generated by protoc-gen-go. DO NOT EDIT.
// source: RedEnvelopeRainGame.proto

package redenvelopegame

import (
	context "context"
	fmt "fmt"
	tars "github.com/TarsCloud/TarsGo/tars"
	model "github.com/TarsCloud/TarsGo/tars/model"
	requestf "github.com/TarsCloud/TarsGo/tars/protocol/res/requestf"
	current "github.com/TarsCloud/TarsGo/tars/util/current"
	tools "github.com/TarsCloud/TarsGo/tars/util/tools"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RedEnvelopeRainCMD int32

const (
	RedEnvelopeRainCMD_REDENVELOPERAIN_LOGIN               RedEnvelopeRainCMD = 0
	RedEnvelopeRainCMD_REDENVELOPERAIN_LOGOUT              RedEnvelopeRainCMD = 1
	RedEnvelopeRainCMD_REDENVELOPERAIN_LIVE_SELECTBATCH    RedEnvelopeRainCMD = 2
	RedEnvelopeRainCMD_REDENVELOPERAIN_CLIENT_SIGN         RedEnvelopeRainCMD = 3
	RedEnvelopeRainCMD_REDENVELOPERAIN_LIVE_START          RedEnvelopeRainCMD = 4
	RedEnvelopeRainCMD_REDENVELOPERAIN_CLIENT_OPEN         RedEnvelopeRainCMD = 5
	RedEnvelopeRainCMD_REDENVELOPERAIN_OVER                RedEnvelopeRainCMD = 6
	RedEnvelopeRainCMD_REDENVELOPERAIN_CLIENT_WINNER_QUERY RedEnvelopeRainCMD = 7
	RedEnvelopeRainCMD_REDENVELOPERAIN_LIVE_ACTION         RedEnvelopeRainCMD = 8
	RedEnvelopeRainCMD_REDENVELOPERAIN_LIVE_MUSIC          RedEnvelopeRainCMD = 9
)

var RedEnvelopeRainCMD_name = map[int32]string{
	0: "REDENVELOPERAIN_LOGIN",
	1: "REDENVELOPERAIN_LOGOUT",
	2: "REDENVELOPERAIN_LIVE_SELECTBATCH",
	3: "REDENVELOPERAIN_CLIENT_SIGN",
	4: "REDENVELOPERAIN_LIVE_START",
	5: "REDENVELOPERAIN_CLIENT_OPEN",
	6: "REDENVELOPERAIN_OVER",
	7: "REDENVELOPERAIN_CLIENT_WINNER_QUERY",
	8: "REDENVELOPERAIN_LIVE_ACTION",
	9: "REDENVELOPERAIN_LIVE_MUSIC",
}

var RedEnvelopeRainCMD_value = map[string]int32{
	"REDENVELOPERAIN_LOGIN":               0,
	"REDENVELOPERAIN_LOGOUT":              1,
	"REDENVELOPERAIN_LIVE_SELECTBATCH":    2,
	"REDENVELOPERAIN_CLIENT_SIGN":         3,
	"REDENVELOPERAIN_LIVE_START":          4,
	"REDENVELOPERAIN_CLIENT_OPEN":         5,
	"REDENVELOPERAIN_OVER":                6,
	"REDENVELOPERAIN_CLIENT_WINNER_QUERY": 7,
	"REDENVELOPERAIN_LIVE_ACTION":         8,
	"REDENVELOPERAIN_LIVE_MUSIC":          9,
}

func (x RedEnvelopeRainCMD) String() string {
	return proto.EnumName(RedEnvelopeRainCMD_name, int32(x))
}

func (RedEnvelopeRainCMD) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e6e33e9d3041aa13, []int{0}
}

//大屏当前游戏状态
type LiveRedEnvelopeRainGameInfo struct {
	BatchId              int64                        `protobuf:"varint,1,opt,name=BatchId,proto3" json:"BatchId,omitempty"`
	State                RedEnvelopeBatchStatus       `protobuf:"varint,2,opt,name=State,proto3,enum=RedEnvelopeBatchStatus" json:"State,omitempty"`
	JoinUserCount        int64                        `protobuf:"varint,3,opt,name=JoinUserCount,proto3" json:"JoinUserCount,omitempty"`
	JoinUserList         []*GameUserInfo              `protobuf:"bytes,4,rep,name=JoinUserList,proto3" json:"JoinUserList,omitempty"`
	WinnerList           []*PBRedEnvelopeWinnerRecord `protobuf:"bytes,5,rep,name=WinnerList,proto3" json:"WinnerList,omitempty"`
	PrizeList            []*PBRedEnvelopeItem         `protobuf:"bytes,6,rep,name=PrizeList,proto3" json:"PrizeList,omitempty"`
	SystemTime           int64                        `protobuf:"varint,7,opt,name=SystemTime,proto3" json:"SystemTime,omitempty"`
	StartTime            int64                        `protobuf:"varint,8,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	EndTime              int64                        `protobuf:"varint,9,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *LiveRedEnvelopeRainGameInfo) Reset()         { *m = LiveRedEnvelopeRainGameInfo{} }
func (m *LiveRedEnvelopeRainGameInfo) String() string { return proto.CompactTextString(m) }
func (*LiveRedEnvelopeRainGameInfo) ProtoMessage()    {}
func (*LiveRedEnvelopeRainGameInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6e33e9d3041aa13, []int{0}
}

func (m *LiveRedEnvelopeRainGameInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LiveRedEnvelopeRainGameInfo.Unmarshal(m, b)
}
func (m *LiveRedEnvelopeRainGameInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LiveRedEnvelopeRainGameInfo.Marshal(b, m, deterministic)
}
func (m *LiveRedEnvelopeRainGameInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiveRedEnvelopeRainGameInfo.Merge(m, src)
}
func (m *LiveRedEnvelopeRainGameInfo) XXX_Size() int {
	return xxx_messageInfo_LiveRedEnvelopeRainGameInfo.Size(m)
}
func (m *LiveRedEnvelopeRainGameInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_LiveRedEnvelopeRainGameInfo.DiscardUnknown(m)
}

var xxx_messageInfo_LiveRedEnvelopeRainGameInfo proto.InternalMessageInfo

func (m *LiveRedEnvelopeRainGameInfo) GetBatchId() int64 {
	if m != nil {
		return m.BatchId
	}
	return 0
}

func (m *LiveRedEnvelopeRainGameInfo) GetState() RedEnvelopeBatchStatus {
	if m != nil {
		return m.State
	}
	return RedEnvelopeBatchStatus_ALL
}

func (m *LiveRedEnvelopeRainGameInfo) GetJoinUserCount() int64 {
	if m != nil {
		return m.JoinUserCount
	}
	return 0
}

func (m *LiveRedEnvelopeRainGameInfo) GetJoinUserList() []*GameUserInfo {
	if m != nil {
		return m.JoinUserList
	}
	return nil
}

func (m *LiveRedEnvelopeRainGameInfo) GetWinnerList() []*PBRedEnvelopeWinnerRecord {
	if m != nil {
		return m.WinnerList
	}
	return nil
}

func (m *LiveRedEnvelopeRainGameInfo) GetPrizeList() []*PBRedEnvelopeItem {
	if m != nil {
		return m.PrizeList
	}
	return nil
}

func (m *LiveRedEnvelopeRainGameInfo) GetSystemTime() int64 {
	if m != nil {
		return m.SystemTime
	}
	return 0
}

func (m *LiveRedEnvelopeRainGameInfo) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *LiveRedEnvelopeRainGameInfo) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

//手机游戏当前状态
type ClientRedEnvelopeRainGameInfo struct {
	BatchId              int64                  `protobuf:"varint,1,opt,name=BatchId,proto3" json:"BatchId,omitempty"`
	State                RedEnvelopeBatchStatus `protobuf:"varint,2,opt,name=State,proto3,enum=RedEnvelopeBatchStatus" json:"State,omitempty"`
	JoinCount            int64                  `protobuf:"varint,3,opt,name=JoinCount,proto3" json:"JoinCount,omitempty"`
	SystemTime           int64                  `protobuf:"varint,4,opt,name=SystemTime,proto3" json:"SystemTime,omitempty"`
	StartTime            int64                  `protobuf:"varint,5,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	EndTime              int64                  `protobuf:"varint,6,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ClientRedEnvelopeRainGameInfo) Reset()         { *m = ClientRedEnvelopeRainGameInfo{} }
func (m *ClientRedEnvelopeRainGameInfo) String() string { return proto.CompactTextString(m) }
func (*ClientRedEnvelopeRainGameInfo) ProtoMessage()    {}
func (*ClientRedEnvelopeRainGameInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6e33e9d3041aa13, []int{1}
}

func (m *ClientRedEnvelopeRainGameInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientRedEnvelopeRainGameInfo.Unmarshal(m, b)
}
func (m *ClientRedEnvelopeRainGameInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientRedEnvelopeRainGameInfo.Marshal(b, m, deterministic)
}
func (m *ClientRedEnvelopeRainGameInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientRedEnvelopeRainGameInfo.Merge(m, src)
}
func (m *ClientRedEnvelopeRainGameInfo) XXX_Size() int {
	return xxx_messageInfo_ClientRedEnvelopeRainGameInfo.Size(m)
}
func (m *ClientRedEnvelopeRainGameInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientRedEnvelopeRainGameInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ClientRedEnvelopeRainGameInfo proto.InternalMessageInfo

func (m *ClientRedEnvelopeRainGameInfo) GetBatchId() int64 {
	if m != nil {
		return m.BatchId
	}
	return 0
}

func (m *ClientRedEnvelopeRainGameInfo) GetState() RedEnvelopeBatchStatus {
	if m != nil {
		return m.State
	}
	return RedEnvelopeBatchStatus_ALL
}

func (m *ClientRedEnvelopeRainGameInfo) GetJoinCount() int64 {
	if m != nil {
		return m.JoinCount
	}
	return 0
}

func (m *ClientRedEnvelopeRainGameInfo) GetSystemTime() int64 {
	if m != nil {
		return m.SystemTime
	}
	return 0
}

func (m *ClientRedEnvelopeRainGameInfo) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *ClientRedEnvelopeRainGameInfo) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

//cmdid=0时大屏端获取游戏配置和当前游戏状态
type LiveRedEnvelopeRainLoginRsp struct {
	Code                 Code                         `protobuf:"varint,1,opt,name=Code,proto3,enum=Code" json:"Code,omitempty"`
	ClientUrl            string                       `protobuf:"bytes,2,opt,name=ClientUrl,proto3" json:"ClientUrl,omitempty"`
	MusicState           bool                         `protobuf:"varint,3,opt,name=MusicState,proto3" json:"MusicState,omitempty"`
	CurrentGameInfo      *LiveRedEnvelopeRainGameInfo `protobuf:"bytes,4,opt,name=CurrentGameInfo,proto3" json:"CurrentGameInfo,omitempty"`
	ConfigList           []*PBGameConfig              `protobuf:"bytes,5,rep,name=ConfigList,proto3" json:"ConfigList,omitempty"`
	BatchList            []*PBRedEnvelopeBatch        `protobuf:"bytes,6,rep,name=BatchList,proto3" json:"BatchList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *LiveRedEnvelopeRainLoginRsp) Reset()         { *m = LiveRedEnvelopeRainLoginRsp{} }
func (m *LiveRedEnvelopeRainLoginRsp) String() string { return proto.CompactTextString(m) }
func (*LiveRedEnvelopeRainLoginRsp) ProtoMessage()    {}
func (*LiveRedEnvelopeRainLoginRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6e33e9d3041aa13, []int{2}
}

func (m *LiveRedEnvelopeRainLoginRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LiveRedEnvelopeRainLoginRsp.Unmarshal(m, b)
}
func (m *LiveRedEnvelopeRainLoginRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LiveRedEnvelopeRainLoginRsp.Marshal(b, m, deterministic)
}
func (m *LiveRedEnvelopeRainLoginRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiveRedEnvelopeRainLoginRsp.Merge(m, src)
}
func (m *LiveRedEnvelopeRainLoginRsp) XXX_Size() int {
	return xxx_messageInfo_LiveRedEnvelopeRainLoginRsp.Size(m)
}
func (m *LiveRedEnvelopeRainLoginRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_LiveRedEnvelopeRainLoginRsp.DiscardUnknown(m)
}

var xxx_messageInfo_LiveRedEnvelopeRainLoginRsp proto.InternalMessageInfo

func (m *LiveRedEnvelopeRainLoginRsp) GetCode() Code {
	if m != nil {
		return m.Code
	}
	return Code_NOT_USE
}

func (m *LiveRedEnvelopeRainLoginRsp) GetClientUrl() string {
	if m != nil {
		return m.ClientUrl
	}
	return ""
}

func (m *LiveRedEnvelopeRainLoginRsp) GetMusicState() bool {
	if m != nil {
		return m.MusicState
	}
	return false
}

func (m *LiveRedEnvelopeRainLoginRsp) GetCurrentGameInfo() *LiveRedEnvelopeRainGameInfo {
	if m != nil {
		return m.CurrentGameInfo
	}
	return nil
}

func (m *LiveRedEnvelopeRainLoginRsp) GetConfigList() []*PBGameConfig {
	if m != nil {
		return m.ConfigList
	}
	return nil
}

func (m *LiveRedEnvelopeRainLoginRsp) GetBatchList() []*PBRedEnvelopeBatch {
	if m != nil {
		return m.BatchList
	}
	return nil
}

//cmdid=0时手机端获取游戏配置和当前游戏状态
type ClientRedEnvelopeRainLoginRsp struct {
	Code                 Code                           `protobuf:"varint,1,opt,name=Code,proto3,enum=Code" json:"Code,omitempty"`
	CurrentGameInfo      *ClientRedEnvelopeRainGameInfo `protobuf:"bytes,2,opt,name=CurrentGameInfo,proto3" json:"CurrentGameInfo,omitempty"`
	ConfigList           []*PBGameConfig                `protobuf:"bytes,3,rep,name=ConfigList,proto3" json:"ConfigList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *ClientRedEnvelopeRainLoginRsp) Reset()         { *m = ClientRedEnvelopeRainLoginRsp{} }
func (m *ClientRedEnvelopeRainLoginRsp) String() string { return proto.CompactTextString(m) }
func (*ClientRedEnvelopeRainLoginRsp) ProtoMessage()    {}
func (*ClientRedEnvelopeRainLoginRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6e33e9d3041aa13, []int{3}
}

func (m *ClientRedEnvelopeRainLoginRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientRedEnvelopeRainLoginRsp.Unmarshal(m, b)
}
func (m *ClientRedEnvelopeRainLoginRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientRedEnvelopeRainLoginRsp.Marshal(b, m, deterministic)
}
func (m *ClientRedEnvelopeRainLoginRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientRedEnvelopeRainLoginRsp.Merge(m, src)
}
func (m *ClientRedEnvelopeRainLoginRsp) XXX_Size() int {
	return xxx_messageInfo_ClientRedEnvelopeRainLoginRsp.Size(m)
}
func (m *ClientRedEnvelopeRainLoginRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientRedEnvelopeRainLoginRsp.DiscardUnknown(m)
}

var xxx_messageInfo_ClientRedEnvelopeRainLoginRsp proto.InternalMessageInfo

func (m *ClientRedEnvelopeRainLoginRsp) GetCode() Code {
	if m != nil {
		return m.Code
	}
	return Code_NOT_USE
}

func (m *ClientRedEnvelopeRainLoginRsp) GetCurrentGameInfo() *ClientRedEnvelopeRainGameInfo {
	if m != nil {
		return m.CurrentGameInfo
	}
	return nil
}

func (m *ClientRedEnvelopeRainLoginRsp) GetConfigList() []*PBGameConfig {
	if m != nil {
		return m.ConfigList
	}
	return nil
}

//cmdid = 2 大屏批次选择请求
type LiveRedEnvelopeRainSelectBatchReq struct {
	BatchId              int64    `protobuf:"varint,1,opt,name=BatchId,proto3" json:"BatchId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LiveRedEnvelopeRainSelectBatchReq) Reset()         { *m = LiveRedEnvelopeRainSelectBatchReq{} }
func (m *LiveRedEnvelopeRainSelectBatchReq) String() string { return proto.CompactTextString(m) }
func (*LiveRedEnvelopeRainSelectBatchReq) ProtoMessage()    {}
func (*LiveRedEnvelopeRainSelectBatchReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6e33e9d3041aa13, []int{4}
}

func (m *LiveRedEnvelopeRainSelectBatchReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LiveRedEnvelopeRainSelectBatchReq.Unmarshal(m, b)
}
func (m *LiveRedEnvelopeRainSelectBatchReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LiveRedEnvelopeRainSelectBatchReq.Marshal(b, m, deterministic)
}
func (m *LiveRedEnvelopeRainSelectBatchReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiveRedEnvelopeRainSelectBatchReq.Merge(m, src)
}
func (m *LiveRedEnvelopeRainSelectBatchReq) XXX_Size() int {
	return xxx_messageInfo_LiveRedEnvelopeRainSelectBatchReq.Size(m)
}
func (m *LiveRedEnvelopeRainSelectBatchReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LiveRedEnvelopeRainSelectBatchReq.DiscardUnknown(m)
}

var xxx_messageInfo_LiveRedEnvelopeRainSelectBatchReq proto.InternalMessageInfo

func (m *LiveRedEnvelopeRainSelectBatchReq) GetBatchId() int64 {
	if m != nil {
		return m.BatchId
	}
	return 0
}

//cmdid = 2 大屏批次选择请求
type LiveRedEnvelopeRainSelectBatchRsp struct {
	Code                 Code                         `protobuf:"varint,1,opt,name=Code,proto3,enum=Code" json:"Code,omitempty"`
	GameInfo             *LiveRedEnvelopeRainGameInfo `protobuf:"bytes,2,opt,name=GameInfo,proto3" json:"GameInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *LiveRedEnvelopeRainSelectBatchRsp) Reset()         { *m = LiveRedEnvelopeRainSelectBatchRsp{} }
func (m *LiveRedEnvelopeRainSelectBatchRsp) String() string { return proto.CompactTextString(m) }
func (*LiveRedEnvelopeRainSelectBatchRsp) ProtoMessage()    {}
func (*LiveRedEnvelopeRainSelectBatchRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6e33e9d3041aa13, []int{5}
}

func (m *LiveRedEnvelopeRainSelectBatchRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LiveRedEnvelopeRainSelectBatchRsp.Unmarshal(m, b)
}
func (m *LiveRedEnvelopeRainSelectBatchRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LiveRedEnvelopeRainSelectBatchRsp.Marshal(b, m, deterministic)
}
func (m *LiveRedEnvelopeRainSelectBatchRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiveRedEnvelopeRainSelectBatchRsp.Merge(m, src)
}
func (m *LiveRedEnvelopeRainSelectBatchRsp) XXX_Size() int {
	return xxx_messageInfo_LiveRedEnvelopeRainSelectBatchRsp.Size(m)
}
func (m *LiveRedEnvelopeRainSelectBatchRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_LiveRedEnvelopeRainSelectBatchRsp.DiscardUnknown(m)
}

var xxx_messageInfo_LiveRedEnvelopeRainSelectBatchRsp proto.InternalMessageInfo

func (m *LiveRedEnvelopeRainSelectBatchRsp) GetCode() Code {
	if m != nil {
		return m.Code
	}
	return Code_NOT_USE
}

func (m *LiveRedEnvelopeRainSelectBatchRsp) GetGameInfo() *LiveRedEnvelopeRainGameInfo {
	if m != nil {
		return m.GameInfo
	}
	return nil
}

//cmdid=2时手机端获取大屏选择批次的信息
type ClientRedEnvelopeRainSelectBatchRsp struct {
	Code                 Code                           `protobuf:"varint,1,opt,name=Code,proto3,enum=Code" json:"Code,omitempty"`
	CurrentGameInfo      *ClientRedEnvelopeRainGameInfo `protobuf:"bytes,2,opt,name=CurrentGameInfo,proto3" json:"CurrentGameInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *ClientRedEnvelopeRainSelectBatchRsp) Reset()         { *m = ClientRedEnvelopeRainSelectBatchRsp{} }
func (m *ClientRedEnvelopeRainSelectBatchRsp) String() string { return proto.CompactTextString(m) }
func (*ClientRedEnvelopeRainSelectBatchRsp) ProtoMessage()    {}
func (*ClientRedEnvelopeRainSelectBatchRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6e33e9d3041aa13, []int{6}
}

func (m *ClientRedEnvelopeRainSelectBatchRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientRedEnvelopeRainSelectBatchRsp.Unmarshal(m, b)
}
func (m *ClientRedEnvelopeRainSelectBatchRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientRedEnvelopeRainSelectBatchRsp.Marshal(b, m, deterministic)
}
func (m *ClientRedEnvelopeRainSelectBatchRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientRedEnvelopeRainSelectBatchRsp.Merge(m, src)
}
func (m *ClientRedEnvelopeRainSelectBatchRsp) XXX_Size() int {
	return xxx_messageInfo_ClientRedEnvelopeRainSelectBatchRsp.Size(m)
}
func (m *ClientRedEnvelopeRainSelectBatchRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientRedEnvelopeRainSelectBatchRsp.DiscardUnknown(m)
}

var xxx_messageInfo_ClientRedEnvelopeRainSelectBatchRsp proto.InternalMessageInfo

func (m *ClientRedEnvelopeRainSelectBatchRsp) GetCode() Code {
	if m != nil {
		return m.Code
	}
	return Code_NOT_USE
}

func (m *ClientRedEnvelopeRainSelectBatchRsp) GetCurrentGameInfo() *ClientRedEnvelopeRainGameInfo {
	if m != nil {
		return m.CurrentGameInfo
	}
	return nil
}

//cmdid = 3 大屏端获取参与人数
type LiveRedEnvelopeRainSignRsp struct {
	Code                 Code     `protobuf:"varint,1,opt,name=Code,proto3,enum=Code" json:"Code,omitempty"`
	JoinCount            int64    `protobuf:"varint,2,opt,name=JoinCount,proto3" json:"JoinCount,omitempty"`
	UserId               int64    `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`
	UserName             string   `protobuf:"bytes,4,opt,name=userName,proto3" json:"userName,omitempty"`
	Avatar               string   `protobuf:"bytes,5,opt,name=avatar,proto3" json:"avatar,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LiveRedEnvelopeRainSignRsp) Reset()         { *m = LiveRedEnvelopeRainSignRsp{} }
func (m *LiveRedEnvelopeRainSignRsp) String() string { return proto.CompactTextString(m) }
func (*LiveRedEnvelopeRainSignRsp) ProtoMessage()    {}
func (*LiveRedEnvelopeRainSignRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6e33e9d3041aa13, []int{7}
}

func (m *LiveRedEnvelopeRainSignRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LiveRedEnvelopeRainSignRsp.Unmarshal(m, b)
}
func (m *LiveRedEnvelopeRainSignRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LiveRedEnvelopeRainSignRsp.Marshal(b, m, deterministic)
}
func (m *LiveRedEnvelopeRainSignRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiveRedEnvelopeRainSignRsp.Merge(m, src)
}
func (m *LiveRedEnvelopeRainSignRsp) XXX_Size() int {
	return xxx_messageInfo_LiveRedEnvelopeRainSignRsp.Size(m)
}
func (m *LiveRedEnvelopeRainSignRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_LiveRedEnvelopeRainSignRsp.DiscardUnknown(m)
}

var xxx_messageInfo_LiveRedEnvelopeRainSignRsp proto.InternalMessageInfo

func (m *LiveRedEnvelopeRainSignRsp) GetCode() Code {
	if m != nil {
		return m.Code
	}
	return Code_NOT_USE
}

func (m *LiveRedEnvelopeRainSignRsp) GetJoinCount() int64 {
	if m != nil {
		return m.JoinCount
	}
	return 0
}

func (m *LiveRedEnvelopeRainSignRsp) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *LiveRedEnvelopeRainSignRsp) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *LiveRedEnvelopeRainSignRsp) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

//cmdid = 3 手机端参与人数更新
type ClientRedEnvelopeRainSignRsp struct {
	Code                 Code     `protobuf:"varint,1,opt,name=Code,proto3,enum=Code" json:"Code,omitempty"`
	JoinCount            int64    `protobuf:"varint,2,opt,name=JoinCount,proto3" json:"JoinCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientRedEnvelopeRainSignRsp) Reset()         { *m = ClientRedEnvelopeRainSignRsp{} }
func (m *ClientRedEnvelopeRainSignRsp) String() string { return proto.CompactTextString(m) }
func (*ClientRedEnvelopeRainSignRsp) ProtoMessage()    {}
func (*ClientRedEnvelopeRainSignRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6e33e9d3041aa13, []int{8}
}

func (m *ClientRedEnvelopeRainSignRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientRedEnvelopeRainSignRsp.Unmarshal(m, b)
}
func (m *ClientRedEnvelopeRainSignRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientRedEnvelopeRainSignRsp.Marshal(b, m, deterministic)
}
func (m *ClientRedEnvelopeRainSignRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientRedEnvelopeRainSignRsp.Merge(m, src)
}
func (m *ClientRedEnvelopeRainSignRsp) XXX_Size() int {
	return xxx_messageInfo_ClientRedEnvelopeRainSignRsp.Size(m)
}
func (m *ClientRedEnvelopeRainSignRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientRedEnvelopeRainSignRsp.DiscardUnknown(m)
}

var xxx_messageInfo_ClientRedEnvelopeRainSignRsp proto.InternalMessageInfo

func (m *ClientRedEnvelopeRainSignRsp) GetCode() Code {
	if m != nil {
		return m.Code
	}
	return Code_NOT_USE
}

func (m *ClientRedEnvelopeRainSignRsp) GetJoinCount() int64 {
	if m != nil {
		return m.JoinCount
	}
	return 0
}

//cmdid =4 大屏开始游戏
type LiveRedEnvelopeRainStartReq struct {
	BatchId              int64    `protobuf:"varint,1,opt,name=BatchId,proto3" json:"BatchId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LiveRedEnvelopeRainStartReq) Reset()         { *m = LiveRedEnvelopeRainStartReq{} }
func (m *LiveRedEnvelopeRainStartReq) String() string { return proto.CompactTextString(m) }
func (*LiveRedEnvelopeRainStartReq) ProtoMessage()    {}
func (*LiveRedEnvelopeRainStartReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6e33e9d3041aa13, []int{9}
}

func (m *LiveRedEnvelopeRainStartReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LiveRedEnvelopeRainStartReq.Unmarshal(m, b)
}
func (m *LiveRedEnvelopeRainStartReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LiveRedEnvelopeRainStartReq.Marshal(b, m, deterministic)
}
func (m *LiveRedEnvelopeRainStartReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiveRedEnvelopeRainStartReq.Merge(m, src)
}
func (m *LiveRedEnvelopeRainStartReq) XXX_Size() int {
	return xxx_messageInfo_LiveRedEnvelopeRainStartReq.Size(m)
}
func (m *LiveRedEnvelopeRainStartReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LiveRedEnvelopeRainStartReq.DiscardUnknown(m)
}

var xxx_messageInfo_LiveRedEnvelopeRainStartReq proto.InternalMessageInfo

func (m *LiveRedEnvelopeRainStartReq) GetBatchId() int64 {
	if m != nil {
		return m.BatchId
	}
	return 0
}

//cmdid = 4时游戏开始的通知
//cmdid = 6时游戏结束的通知
type RedEnvelopeRainStateChangeRsp struct {
	Code                 Code                   `protobuf:"varint,1,opt,name=Code,proto3,enum=Code" json:"Code,omitempty"`
	BatchId              int64                  `protobuf:"varint,2,opt,name=BatchId,proto3" json:"BatchId,omitempty"`
	State                RedEnvelopeBatchStatus `protobuf:"varint,3,opt,name=State,proto3,enum=RedEnvelopeBatchStatus" json:"State,omitempty"`
	SystemTime           int64                  `protobuf:"varint,4,opt,name=SystemTime,proto3" json:"SystemTime,omitempty"`
	StartTime            int64                  `protobuf:"varint,5,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	EndTime              int64                  `protobuf:"varint,6,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *RedEnvelopeRainStateChangeRsp) Reset()         { *m = RedEnvelopeRainStateChangeRsp{} }
func (m *RedEnvelopeRainStateChangeRsp) String() string { return proto.CompactTextString(m) }
func (*RedEnvelopeRainStateChangeRsp) ProtoMessage()    {}
func (*RedEnvelopeRainStateChangeRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6e33e9d3041aa13, []int{10}
}

func (m *RedEnvelopeRainStateChangeRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RedEnvelopeRainStateChangeRsp.Unmarshal(m, b)
}
func (m *RedEnvelopeRainStateChangeRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RedEnvelopeRainStateChangeRsp.Marshal(b, m, deterministic)
}
func (m *RedEnvelopeRainStateChangeRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedEnvelopeRainStateChangeRsp.Merge(m, src)
}
func (m *RedEnvelopeRainStateChangeRsp) XXX_Size() int {
	return xxx_messageInfo_RedEnvelopeRainStateChangeRsp.Size(m)
}
func (m *RedEnvelopeRainStateChangeRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_RedEnvelopeRainStateChangeRsp.DiscardUnknown(m)
}

var xxx_messageInfo_RedEnvelopeRainStateChangeRsp proto.InternalMessageInfo

func (m *RedEnvelopeRainStateChangeRsp) GetCode() Code {
	if m != nil {
		return m.Code
	}
	return Code_NOT_USE
}

func (m *RedEnvelopeRainStateChangeRsp) GetBatchId() int64 {
	if m != nil {
		return m.BatchId
	}
	return 0
}

func (m *RedEnvelopeRainStateChangeRsp) GetState() RedEnvelopeBatchStatus {
	if m != nil {
		return m.State
	}
	return RedEnvelopeBatchStatus_ALL
}

func (m *RedEnvelopeRainStateChangeRsp) GetSystemTime() int64 {
	if m != nil {
		return m.SystemTime
	}
	return 0
}

func (m *RedEnvelopeRainStateChangeRsp) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *RedEnvelopeRainStateChangeRsp) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

//cmdid = 5手机端提交开奖申请
type ClientRedEnvelopeRainOpenReq struct {
	BatchId              int64    `protobuf:"varint,1,opt,name=BatchId,proto3" json:"BatchId,omitempty"`
	UserOpenId           string   `protobuf:"bytes,2,opt,name=UserOpenId,proto3" json:"UserOpenId,omitempty"`
	UnionGuid            string   `protobuf:"bytes,3,opt,name=UnionGuid,proto3" json:"UnionGuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientRedEnvelopeRainOpenReq) Reset()         { *m = ClientRedEnvelopeRainOpenReq{} }
func (m *ClientRedEnvelopeRainOpenReq) String() string { return proto.CompactTextString(m) }
func (*ClientRedEnvelopeRainOpenReq) ProtoMessage()    {}
func (*ClientRedEnvelopeRainOpenReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6e33e9d3041aa13, []int{11}
}

func (m *ClientRedEnvelopeRainOpenReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientRedEnvelopeRainOpenReq.Unmarshal(m, b)
}
func (m *ClientRedEnvelopeRainOpenReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientRedEnvelopeRainOpenReq.Marshal(b, m, deterministic)
}
func (m *ClientRedEnvelopeRainOpenReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientRedEnvelopeRainOpenReq.Merge(m, src)
}
func (m *ClientRedEnvelopeRainOpenReq) XXX_Size() int {
	return xxx_messageInfo_ClientRedEnvelopeRainOpenReq.Size(m)
}
func (m *ClientRedEnvelopeRainOpenReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientRedEnvelopeRainOpenReq.DiscardUnknown(m)
}

var xxx_messageInfo_ClientRedEnvelopeRainOpenReq proto.InternalMessageInfo

func (m *ClientRedEnvelopeRainOpenReq) GetBatchId() int64 {
	if m != nil {
		return m.BatchId
	}
	return 0
}

func (m *ClientRedEnvelopeRainOpenReq) GetUserOpenId() string {
	if m != nil {
		return m.UserOpenId
	}
	return ""
}

func (m *ClientRedEnvelopeRainOpenReq) GetUnionGuid() string {
	if m != nil {
		return m.UnionGuid
	}
	return ""
}

//cmdid = 5手机端提交开奖结果
type ClientRedEnvelopeRainOpenRsp struct {
	Code                 Code                       `protobuf:"varint,1,opt,name=Code,proto3,enum=Code" json:"Code,omitempty"`
	Prize                *PBRedEnvelopeWinnerRecord `protobuf:"bytes,2,opt,name=Prize,proto3" json:"Prize,omitempty"`
	UnionGuid            string                     `protobuf:"bytes,3,opt,name=UnionGuid,proto3" json:"UnionGuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *ClientRedEnvelopeRainOpenRsp) Reset()         { *m = ClientRedEnvelopeRainOpenRsp{} }
func (m *ClientRedEnvelopeRainOpenRsp) String() string { return proto.CompactTextString(m) }
func (*ClientRedEnvelopeRainOpenRsp) ProtoMessage()    {}
func (*ClientRedEnvelopeRainOpenRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6e33e9d3041aa13, []int{12}
}

func (m *ClientRedEnvelopeRainOpenRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientRedEnvelopeRainOpenRsp.Unmarshal(m, b)
}
func (m *ClientRedEnvelopeRainOpenRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientRedEnvelopeRainOpenRsp.Marshal(b, m, deterministic)
}
func (m *ClientRedEnvelopeRainOpenRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientRedEnvelopeRainOpenRsp.Merge(m, src)
}
func (m *ClientRedEnvelopeRainOpenRsp) XXX_Size() int {
	return xxx_messageInfo_ClientRedEnvelopeRainOpenRsp.Size(m)
}
func (m *ClientRedEnvelopeRainOpenRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientRedEnvelopeRainOpenRsp.DiscardUnknown(m)
}

var xxx_messageInfo_ClientRedEnvelopeRainOpenRsp proto.InternalMessageInfo

func (m *ClientRedEnvelopeRainOpenRsp) GetCode() Code {
	if m != nil {
		return m.Code
	}
	return Code_NOT_USE
}

func (m *ClientRedEnvelopeRainOpenRsp) GetPrize() *PBRedEnvelopeWinnerRecord {
	if m != nil {
		return m.Prize
	}
	return nil
}

func (m *ClientRedEnvelopeRainOpenRsp) GetUnionGuid() string {
	if m != nil {
		return m.UnionGuid
	}
	return ""
}

//cmdid = 5大屏端中奖记录
type LiveRedEnvelopeRainOpenRsp struct {
	Code                 Code                       `protobuf:"varint,1,opt,name=Code,proto3,enum=Code" json:"Code,omitempty"`
	UserId               int64                      `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	UserName             string                     `protobuf:"bytes,3,opt,name=userName,proto3" json:"userName,omitempty"`
	Avatar               string                     `protobuf:"bytes,4,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Prize                *PBRedEnvelopeWinnerRecord `protobuf:"bytes,5,opt,name=Prize,proto3" json:"Prize,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *LiveRedEnvelopeRainOpenRsp) Reset()         { *m = LiveRedEnvelopeRainOpenRsp{} }
func (m *LiveRedEnvelopeRainOpenRsp) String() string { return proto.CompactTextString(m) }
func (*LiveRedEnvelopeRainOpenRsp) ProtoMessage()    {}
func (*LiveRedEnvelopeRainOpenRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6e33e9d3041aa13, []int{13}
}

func (m *LiveRedEnvelopeRainOpenRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LiveRedEnvelopeRainOpenRsp.Unmarshal(m, b)
}
func (m *LiveRedEnvelopeRainOpenRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LiveRedEnvelopeRainOpenRsp.Marshal(b, m, deterministic)
}
func (m *LiveRedEnvelopeRainOpenRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiveRedEnvelopeRainOpenRsp.Merge(m, src)
}
func (m *LiveRedEnvelopeRainOpenRsp) XXX_Size() int {
	return xxx_messageInfo_LiveRedEnvelopeRainOpenRsp.Size(m)
}
func (m *LiveRedEnvelopeRainOpenRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_LiveRedEnvelopeRainOpenRsp.DiscardUnknown(m)
}

var xxx_messageInfo_LiveRedEnvelopeRainOpenRsp proto.InternalMessageInfo

func (m *LiveRedEnvelopeRainOpenRsp) GetCode() Code {
	if m != nil {
		return m.Code
	}
	return Code_NOT_USE
}

func (m *LiveRedEnvelopeRainOpenRsp) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *LiveRedEnvelopeRainOpenRsp) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *LiveRedEnvelopeRainOpenRsp) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *LiveRedEnvelopeRainOpenRsp) GetPrize() *PBRedEnvelopeWinnerRecord {
	if m != nil {
		return m.Prize
	}
	return nil
}

//cmdid =6 大屏结束游戏
type LiveRedEnvelopeRainOverReq struct {
	BatchId              int64    `protobuf:"varint,1,opt,name=BatchId,proto3" json:"BatchId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LiveRedEnvelopeRainOverReq) Reset()         { *m = LiveRedEnvelopeRainOverReq{} }
func (m *LiveRedEnvelopeRainOverReq) String() string { return proto.CompactTextString(m) }
func (*LiveRedEnvelopeRainOverReq) ProtoMessage()    {}
func (*LiveRedEnvelopeRainOverReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6e33e9d3041aa13, []int{14}
}

func (m *LiveRedEnvelopeRainOverReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LiveRedEnvelopeRainOverReq.Unmarshal(m, b)
}
func (m *LiveRedEnvelopeRainOverReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LiveRedEnvelopeRainOverReq.Marshal(b, m, deterministic)
}
func (m *LiveRedEnvelopeRainOverReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiveRedEnvelopeRainOverReq.Merge(m, src)
}
func (m *LiveRedEnvelopeRainOverReq) XXX_Size() int {
	return xxx_messageInfo_LiveRedEnvelopeRainOverReq.Size(m)
}
func (m *LiveRedEnvelopeRainOverReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LiveRedEnvelopeRainOverReq.DiscardUnknown(m)
}

var xxx_messageInfo_LiveRedEnvelopeRainOverReq proto.InternalMessageInfo

func (m *LiveRedEnvelopeRainOverReq) GetBatchId() int64 {
	if m != nil {
		return m.BatchId
	}
	return 0
}

//cmdid = 7 手机端获取该轮中奖纪录申请
type ClientRedEnvelopeRainWinnerReq struct {
	BatchId              int64    `protobuf:"varint,1,opt,name=BatchId,proto3" json:"BatchId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientRedEnvelopeRainWinnerReq) Reset()         { *m = ClientRedEnvelopeRainWinnerReq{} }
func (m *ClientRedEnvelopeRainWinnerReq) String() string { return proto.CompactTextString(m) }
func (*ClientRedEnvelopeRainWinnerReq) ProtoMessage()    {}
func (*ClientRedEnvelopeRainWinnerReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6e33e9d3041aa13, []int{15}
}

func (m *ClientRedEnvelopeRainWinnerReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientRedEnvelopeRainWinnerReq.Unmarshal(m, b)
}
func (m *ClientRedEnvelopeRainWinnerReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientRedEnvelopeRainWinnerReq.Marshal(b, m, deterministic)
}
func (m *ClientRedEnvelopeRainWinnerReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientRedEnvelopeRainWinnerReq.Merge(m, src)
}
func (m *ClientRedEnvelopeRainWinnerReq) XXX_Size() int {
	return xxx_messageInfo_ClientRedEnvelopeRainWinnerReq.Size(m)
}
func (m *ClientRedEnvelopeRainWinnerReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientRedEnvelopeRainWinnerReq.DiscardUnknown(m)
}

var xxx_messageInfo_ClientRedEnvelopeRainWinnerReq proto.InternalMessageInfo

func (m *ClientRedEnvelopeRainWinnerReq) GetBatchId() int64 {
	if m != nil {
		return m.BatchId
	}
	return 0
}

//cmdid = 7 手机端获取该轮中奖纪录申请
type ClientRedEnvelopeRainWinnerRsp struct {
	Code                 Code                         `protobuf:"varint,1,opt,name=Code,proto3,enum=Code" json:"Code,omitempty"`
	List                 []*PBRedEnvelopeWinnerRecord `protobuf:"bytes,2,rep,name=List,proto3" json:"List,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *ClientRedEnvelopeRainWinnerRsp) Reset()         { *m = ClientRedEnvelopeRainWinnerRsp{} }
func (m *ClientRedEnvelopeRainWinnerRsp) String() string { return proto.CompactTextString(m) }
func (*ClientRedEnvelopeRainWinnerRsp) ProtoMessage()    {}
func (*ClientRedEnvelopeRainWinnerRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6e33e9d3041aa13, []int{16}
}

func (m *ClientRedEnvelopeRainWinnerRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientRedEnvelopeRainWinnerRsp.Unmarshal(m, b)
}
func (m *ClientRedEnvelopeRainWinnerRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientRedEnvelopeRainWinnerRsp.Marshal(b, m, deterministic)
}
func (m *ClientRedEnvelopeRainWinnerRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientRedEnvelopeRainWinnerRsp.Merge(m, src)
}
func (m *ClientRedEnvelopeRainWinnerRsp) XXX_Size() int {
	return xxx_messageInfo_ClientRedEnvelopeRainWinnerRsp.Size(m)
}
func (m *ClientRedEnvelopeRainWinnerRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientRedEnvelopeRainWinnerRsp.DiscardUnknown(m)
}

var xxx_messageInfo_ClientRedEnvelopeRainWinnerRsp proto.InternalMessageInfo

func (m *ClientRedEnvelopeRainWinnerRsp) GetCode() Code {
	if m != nil {
		return m.Code
	}
	return Code_NOT_USE
}

func (m *ClientRedEnvelopeRainWinnerRsp) GetList() []*PBRedEnvelopeWinnerRecord {
	if m != nil {
		return m.List
	}
	return nil
}

//cmdid = 8 大屏端操作命令
type LiveRedEnvelopeRainActionReq struct {
	ActionData           string   `protobuf:"bytes,1,opt,name=ActionData,proto3" json:"ActionData,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LiveRedEnvelopeRainActionReq) Reset()         { *m = LiveRedEnvelopeRainActionReq{} }
func (m *LiveRedEnvelopeRainActionReq) String() string { return proto.CompactTextString(m) }
func (*LiveRedEnvelopeRainActionReq) ProtoMessage()    {}
func (*LiveRedEnvelopeRainActionReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6e33e9d3041aa13, []int{17}
}

func (m *LiveRedEnvelopeRainActionReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LiveRedEnvelopeRainActionReq.Unmarshal(m, b)
}
func (m *LiveRedEnvelopeRainActionReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LiveRedEnvelopeRainActionReq.Marshal(b, m, deterministic)
}
func (m *LiveRedEnvelopeRainActionReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiveRedEnvelopeRainActionReq.Merge(m, src)
}
func (m *LiveRedEnvelopeRainActionReq) XXX_Size() int {
	return xxx_messageInfo_LiveRedEnvelopeRainActionReq.Size(m)
}
func (m *LiveRedEnvelopeRainActionReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LiveRedEnvelopeRainActionReq.DiscardUnknown(m)
}

var xxx_messageInfo_LiveRedEnvelopeRainActionReq proto.InternalMessageInfo

func (m *LiveRedEnvelopeRainActionReq) GetActionData() string {
	if m != nil {
		return m.ActionData
	}
	return ""
}

//cmdid = 8 大屏端返回命令
type LiveRedEnvelopeRainActionRsp struct {
	Code                 Code     `protobuf:"varint,1,opt,name=Code,proto3,enum=Code" json:"Code,omitempty"`
	ActionData           string   `protobuf:"bytes,2,opt,name=ActionData,proto3" json:"ActionData,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LiveRedEnvelopeRainActionRsp) Reset()         { *m = LiveRedEnvelopeRainActionRsp{} }
func (m *LiveRedEnvelopeRainActionRsp) String() string { return proto.CompactTextString(m) }
func (*LiveRedEnvelopeRainActionRsp) ProtoMessage()    {}
func (*LiveRedEnvelopeRainActionRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6e33e9d3041aa13, []int{18}
}

func (m *LiveRedEnvelopeRainActionRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LiveRedEnvelopeRainActionRsp.Unmarshal(m, b)
}
func (m *LiveRedEnvelopeRainActionRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LiveRedEnvelopeRainActionRsp.Marshal(b, m, deterministic)
}
func (m *LiveRedEnvelopeRainActionRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiveRedEnvelopeRainActionRsp.Merge(m, src)
}
func (m *LiveRedEnvelopeRainActionRsp) XXX_Size() int {
	return xxx_messageInfo_LiveRedEnvelopeRainActionRsp.Size(m)
}
func (m *LiveRedEnvelopeRainActionRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_LiveRedEnvelopeRainActionRsp.DiscardUnknown(m)
}

var xxx_messageInfo_LiveRedEnvelopeRainActionRsp proto.InternalMessageInfo

func (m *LiveRedEnvelopeRainActionRsp) GetCode() Code {
	if m != nil {
		return m.Code
	}
	return Code_NOT_USE
}

func (m *LiveRedEnvelopeRainActionRsp) GetActionData() string {
	if m != nil {
		return m.ActionData
	}
	return ""
}

func init() {
	proto.RegisterEnum("redenveloperaingame.RedEnvelopeRainCMD", RedEnvelopeRainCMD_name, RedEnvelopeRainCMD_value)
	proto.RegisterType((*LiveRedEnvelopeRainGameInfo)(nil), "redenveloperaingame.LiveRedEnvelopeRainGameInfo")
	proto.RegisterType((*ClientRedEnvelopeRainGameInfo)(nil), "redenveloperaingame.ClientRedEnvelopeRainGameInfo")
	proto.RegisterType((*LiveRedEnvelopeRainLoginRsp)(nil), "redenveloperaingame.LiveRedEnvelopeRainLoginRsp")
	proto.RegisterType((*ClientRedEnvelopeRainLoginRsp)(nil), "redenveloperaingame.ClientRedEnvelopeRainLoginRsp")
	proto.RegisterType((*LiveRedEnvelopeRainSelectBatchReq)(nil), "redenveloperaingame.LiveRedEnvelopeRainSelectBatchReq")
	proto.RegisterType((*LiveRedEnvelopeRainSelectBatchRsp)(nil), "redenveloperaingame.LiveRedEnvelopeRainSelectBatchRsp")
	proto.RegisterType((*ClientRedEnvelopeRainSelectBatchRsp)(nil), "redenveloperaingame.ClientRedEnvelopeRainSelectBatchRsp")
	proto.RegisterType((*LiveRedEnvelopeRainSignRsp)(nil), "redenveloperaingame.LiveRedEnvelopeRainSignRsp")
	proto.RegisterType((*ClientRedEnvelopeRainSignRsp)(nil), "redenveloperaingame.ClientRedEnvelopeRainSignRsp")
	proto.RegisterType((*LiveRedEnvelopeRainStartReq)(nil), "redenveloperaingame.LiveRedEnvelopeRainStartReq")
	proto.RegisterType((*RedEnvelopeRainStateChangeRsp)(nil), "redenveloperaingame.RedEnvelopeRainStateChangeRsp")
	proto.RegisterType((*ClientRedEnvelopeRainOpenReq)(nil), "redenveloperaingame.ClientRedEnvelopeRainOpenReq")
	proto.RegisterType((*ClientRedEnvelopeRainOpenRsp)(nil), "redenveloperaingame.ClientRedEnvelopeRainOpenRsp")
	proto.RegisterType((*LiveRedEnvelopeRainOpenRsp)(nil), "redenveloperaingame.LiveRedEnvelopeRainOpenRsp")
	proto.RegisterType((*LiveRedEnvelopeRainOverReq)(nil), "redenveloperaingame.LiveRedEnvelopeRainOverReq")
	proto.RegisterType((*ClientRedEnvelopeRainWinnerReq)(nil), "redenveloperaingame.ClientRedEnvelopeRainWinnerReq")
	proto.RegisterType((*ClientRedEnvelopeRainWinnerRsp)(nil), "redenveloperaingame.ClientRedEnvelopeRainWinnerRsp")
	proto.RegisterType((*LiveRedEnvelopeRainActionReq)(nil), "redenveloperaingame.LiveRedEnvelopeRainActionReq")
	proto.RegisterType((*LiveRedEnvelopeRainActionRsp)(nil), "redenveloperaingame.LiveRedEnvelopeRainActionRsp")
}

func init() { proto.RegisterFile("RedEnvelopeRainGame.proto", fileDescriptor_e6e33e9d3041aa13) }

var fileDescriptor_e6e33e9d3041aa13 = []byte{
	// 1002 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0xdf, 0x6a, 0xe3, 0xc6,
	0x17, 0xfe, 0x49, 0xb6, 0x13, 0xeb, 0x64, 0x93, 0x15, 0x93, 0xdf, 0xa6, 0x8e, 0x36, 0x9b, 0xa6,
	0xda, 0x85, 0x86, 0xc2, 0x8a, 0xac, 0x17, 0x5a, 0xd8, 0xd2, 0x82, 0xad, 0x88, 0x54, 0xc5, 0x91,
	0xdd, 0xb1, 0x9d, 0xb0, 0x4b, 0x21, 0xa8, 0xf6, 0xac, 0x77, 0x68, 0x3c, 0xca, 0xca, 0xb2, 0xa1,
	0xbd, 0xef, 0x45, 0xa1, 0xf4, 0x11, 0x0a, 0x7d, 0x87, 0xf6, 0x19, 0xfa, 0x08, 0xbd, 0x28, 0xf4,
	0x59, 0xca, 0x8c, 0xe4, 0x95, 0xac, 0x8c, 0x65, 0x97, 0x92, 0x3b, 0x9f, 0xbf, 0x73, 0xbe, 0x4f,
	0xdf, 0x1c, 0x59, 0xb0, 0x8f, 0xc9, 0xd0, 0x61, 0x33, 0x72, 0x1d, 0xdc, 0x10, 0xec, 0x53, 0x76,
	0xe6, 0x8f, 0x89, 0x75, 0x13, 0x06, 0x51, 0x80, 0x76, 0x43, 0x32, 0x24, 0x49, 0x28, 0xf4, 0x29,
	0x1b, 0xf9, 0x63, 0x62, 0xe8, 0x3c, 0xc1, 0x0e, 0xd8, 0x6b, 0x3a, 0x8a, 0xd3, 0x8c, 0x1d, 0xee,
	0x39, 0xf5, 0x23, 0x3f, 0xb1, 0xf7, 0x32, 0x1d, 0x3b, 0x21, 0xfd, 0x3e, 0x69, 0x67, 0xdc, 0xb3,
	0x83, 0xf1, 0x38, 0x60, 0xb1, 0x65, 0xfe, 0x50, 0x82, 0x87, 0x2d, 0x3a, 0x23, 0x92, 0xe3, 0x5d,
	0xf6, 0x3a, 0x40, 0x35, 0xd8, 0x6c, 0xfa, 0xd1, 0xe0, 0x8d, 0x3b, 0xac, 0x29, 0x47, 0xca, 0x71,
	0x09, 0xcf, 0x4d, 0xf4, 0x14, 0x2a, 0xdd, 0xc8, 0x8f, 0x48, 0x4d, 0x3d, 0x52, 0x8e, 0x77, 0xea,
	0xef, 0x59, 0x99, 0x16, 0x22, 0x87, 0x47, 0xa7, 0x13, 0x1c, 0x67, 0xa1, 0x27, 0xb0, 0xfd, 0x65,
	0x40, 0x59, 0x7f, 0x42, 0x42, 0x3b, 0x98, 0xb2, 0xa8, 0x56, 0x12, 0xed, 0x16, 0x9d, 0xe8, 0x19,
	0xdc, 0x9b, 0x3b, 0x5a, 0x74, 0x12, 0xd5, 0xca, 0x47, 0xa5, 0xe3, 0xad, 0xfa, 0xb6, 0xc5, 0xe7,
	0xe1, 0x4e, 0x3e, 0x13, 0x5e, 0x48, 0x41, 0x2f, 0x00, 0x2e, 0x29, 0x63, 0x49, 0x41, 0x45, 0x14,
	0x18, 0x56, 0xa7, 0x99, 0x19, 0x27, 0x8e, 0x63, 0x32, 0x08, 0xc2, 0x21, 0xce, 0x64, 0xa3, 0x13,
	0xd0, 0x04, 0x35, 0xa2, 0x74, 0x43, 0x94, 0xa2, 0xc5, 0x52, 0x37, 0x22, 0x63, 0x9c, 0x26, 0xa1,
	0x43, 0x80, 0xee, 0x77, 0x93, 0x88, 0x8c, 0x7b, 0x74, 0x4c, 0x6a, 0x9b, 0x02, 0x43, 0xc6, 0x83,
	0x0e, 0x40, 0xeb, 0x46, 0x7e, 0x18, 0x89, 0x70, 0x55, 0x84, 0x53, 0x07, 0x67, 0xd3, 0x61, 0x43,
	0x11, 0xd3, 0x62, 0x36, 0x13, 0xd3, 0xfc, 0x5b, 0x81, 0x47, 0xf6, 0x35, 0x25, 0x2c, 0xba, 0xf3,
	0x27, 0x71, 0x00, 0x1a, 0x27, 0x30, 0xfb, 0x14, 0x52, 0x47, 0x0e, 0x60, 0xb9, 0x18, 0x60, 0xa5,
	0x00, 0xe0, 0xc6, 0x22, 0xc0, 0xdf, 0x54, 0xa9, 0xd0, 0x5a, 0xc1, 0x88, 0x32, 0x3c, 0xb9, 0x41,
	0xfb, 0x50, 0xb6, 0x83, 0x21, 0x11, 0xd8, 0x76, 0xea, 0x15, 0x8b, 0x1b, 0x58, 0xb8, 0xf8, 0x91,
	0x31, 0x35, 0xfd, 0xf0, 0x5a, 0x60, 0xd4, 0x70, 0xea, 0xe0, 0x03, 0x9f, 0x4f, 0x27, 0x74, 0x10,
	0x53, 0xc0, 0xf1, 0x54, 0x71, 0xc6, 0x83, 0x5e, 0xc1, 0x7d, 0x7b, 0x1a, 0x86, 0x84, 0x45, 0x73,
	0x2a, 0x05, 0xaa, 0xad, 0xfa, 0x89, 0x25, 0xb9, 0x58, 0x56, 0xc1, 0x65, 0xc0, 0xf9, 0x46, 0xe8,
	0x29, 0x40, 0x7c, 0x07, 0x33, 0xda, 0xdb, 0xb6, 0x3a, 0xcd, 0xf4, 0x72, 0xe2, 0x4c, 0x02, 0x7a,
	0x06, 0x9a, 0x78, 0x1e, 0x19, 0xb9, 0xed, 0x2e, 0xca, 0x4d, 0x84, 0x71, 0x9a, 0x65, 0xfe, 0xb1,
	0x4c, 0x17, 0xeb, 0x10, 0xf7, 0xf5, 0x6d, 0xe8, 0xaa, 0x80, 0x5e, 0x97, 0x42, 0x2f, 0xd4, 0xdf,
	0x2a, 0xf0, 0xa5, 0x15, 0xe0, 0xcd, 0xcf, 0xe0, 0x03, 0x09, 0xb7, 0x5d, 0x72, 0x4d, 0x06, 0x51,
	0x0c, 0x9b, 0xbc, 0x5d, 0x2e, 0x72, 0xf3, 0x27, 0x65, 0x65, 0x7d, 0x31, 0x19, 0x2d, 0xa8, 0xe6,
	0x58, 0xf8, 0xf7, 0x02, 0x78, 0xd7, 0xc1, 0xfc, 0x45, 0x81, 0xc7, 0x52, 0xbe, 0xd6, 0x1f, 0xe8,
	0x4e, 0x9f, 0x8e, 0xf9, 0xab, 0x02, 0x86, 0x8c, 0x2f, 0x3a, 0x5a, 0xe3, 0xba, 0xa5, 0xfb, 0x41,
	0xcd, 0xef, 0x87, 0x3d, 0xd8, 0x98, 0xf2, 0x45, 0x3c, 0x4c, 0x56, 0x47, 0x62, 0x21, 0x03, 0xaa,
	0xfc, 0x97, 0xe7, 0x27, 0x5b, 0x43, 0xc3, 0xef, 0x6c, 0x5e, 0xe3, 0xcf, 0xfc, 0xc8, 0x0f, 0xc5,
	0xc2, 0xd0, 0x70, 0x62, 0x99, 0x97, 0x70, 0x20, 0xe7, 0xf0, 0x3f, 0x0e, 0x69, 0x7e, 0x22, 0xdd,
	0x35, 0x62, 0x4d, 0x15, 0xab, 0xec, 0x2f, 0x05, 0x1e, 0xdd, 0xae, 0x8a, 0x88, 0xfd, 0xc6, 0x67,
	0x23, 0xb2, 0x62, 0xa6, 0x4c, 0x5b, 0x75, 0xc9, 0x86, 0x2e, 0xad, 0xb5, 0xa1, 0xef, 0x6a, 0x07,
	0xcf, 0x96, 0xf0, 0xdd, 0xbe, 0x21, 0xac, 0x90, 0x17, 0x3e, 0x11, 0x7f, 0xe1, 0xf2, 0xc4, 0x04,
	0x9d, 0x86, 0x33, 0x1e, 0x3e, 0x51, 0x9f, 0xd1, 0x80, 0x9d, 0x4d, 0x69, 0x2c, 0x0c, 0x0d, 0xa7,
	0x0e, 0xf3, 0x47, 0xa5, 0xe8, 0xe0, 0x62, 0x52, 0x4f, 0xa0, 0x22, 0xde, 0xbe, 0xc9, 0xdd, 0x28,
	0x7a, 0xb3, 0xc7, 0x89, 0x2b, 0x66, 0xf9, 0x5d, 0x7e, 0x2f, 0xd6, 0x98, 0x24, 0x55, 0xbe, 0xba,
	0x54, 0xf9, 0xa5, 0xa5, 0xca, 0x2f, 0x67, 0x95, 0x9f, 0xa2, 0xaa, 0xac, 0x89, 0xca, 0xfc, 0x58,
	0x3e, 0xf6, 0x8c, 0xe7, 0x15, 0x29, 0xfa, 0x05, 0x1c, 0x4a, 0xa9, 0x9f, 0x9f, 0x51, 0x54, 0xfb,
	0x6d, 0x71, 0x6d, 0x31, 0x5d, 0x16, 0x94, 0xc5, 0x8b, 0x41, 0x5d, 0xf9, 0x8f, 0x4c, 0xe4, 0x99,
	0x9f, 0xc3, 0x81, 0x04, 0x60, 0x63, 0x10, 0xd1, 0x40, 0x88, 0xf3, 0x10, 0x20, 0x36, 0xf8, 0x7f,
	0x5c, 0x71, 0xa0, 0x86, 0x33, 0x1e, 0xf3, 0x65, 0x51, 0x7d, 0xf1, 0xa8, 0x8b, 0xad, 0xd5, 0x7c,
	0xeb, 0x8f, 0xfe, 0x54, 0x01, 0xe5, 0xfa, 0xda, 0xe7, 0xa7, 0x68, 0x1f, 0x1e, 0x60, 0xe7, 0xd4,
	0xf1, 0x2e, 0x9c, 0x56, 0xbb, 0xe3, 0xe0, 0x86, 0xeb, 0x5d, 0xb5, 0xda, 0x67, 0xae, 0xa7, 0xff,
	0x0f, 0x19, 0xb0, 0x27, 0x09, 0xb5, 0xfb, 0x3d, 0x5d, 0x41, 0x4f, 0xe0, 0xe8, 0x56, 0xcc, 0xbd,
	0x70, 0xae, 0xba, 0x4e, 0xcb, 0xb1, 0x7b, 0xcd, 0x46, 0xcf, 0xfe, 0x42, 0x57, 0xd1, 0xfb, 0xf0,
	0x30, 0x9f, 0x65, 0xb7, 0x5c, 0xc7, 0xeb, 0x5d, 0x75, 0xdd, 0x33, 0x4f, 0x2f, 0xa1, 0x43, 0x30,
	0xe4, 0x6d, 0x7a, 0x0d, 0xdc, 0xd3, 0xcb, 0x05, 0x0d, 0xda, 0x1d, 0xc7, 0xd3, 0x2b, 0xa8, 0x06,
	0xff, 0xcf, 0x27, 0xb4, 0x2f, 0x1c, 0xac, 0x6f, 0xa0, 0x0f, 0xe1, 0xf1, 0x92, 0xd2, 0x4b, 0xd7,
	0xf3, 0x1c, 0x7c, 0xf5, 0x55, 0xdf, 0xc1, 0x2f, 0xf5, 0x4d, 0xd9, 0x19, 0x62, 0x86, 0x86, 0xdd,
	0x73, 0xdb, 0x9e, 0x5e, 0x5d, 0x3a, 0xe4, 0x79, 0xbf, 0xeb, 0xda, 0xba, 0x56, 0xff, 0x59, 0x01,
	0x43, 0xf2, 0x4a, 0xeb, 0x92, 0x70, 0x46, 0x07, 0x04, 0x7d, 0x0a, 0xbb, 0x98, 0x0c, 0x08, 0x9d,
	0x89, 0x3f, 0xff, 0xf3, 0x0f, 0x1c, 0xc4, 0xf7, 0xe7, 0x2d, 0x2f, 0x26, 0x6f, 0x8d, 0xad, 0x79,
	0x80, 0x3f, 0xf0, 0xe7, 0x70, 0x3f, 0xb1, 0xb8, 0x2e, 0x44, 0xe1, 0xae, 0x95, 0xf3, 0xe4, 0x8b,
	0x9a, 0x0f, 0x5e, 0xc9, 0x3e, 0xb7, 0xbe, 0xd9, 0x10, 0x5f, 0x4b, 0xcf, 0xff, 0x09, 0x00, 0x00,
	0xff, 0xff, 0x98, 0x51, 0xaa, 0xaf, 0xa7, 0x0d, 0x00, 0x00,
}

// This following code was generated by tarsrpc
// Gernerated from RedEnvelopeRainGame.proto
type RedEnvelopeRainGameService struct {
	s model.Servant
}

//SetServant is required by the servant interface.
func (obj *RedEnvelopeRainGameService) SetServant(s model.Servant) {
	obj.s = s
}

//AddServant is required by the servant interface
func (obj *RedEnvelopeRainGameService) AddServant(imp impRedEnvelopeRainGameService, objStr string) {
	tars.AddServant(obj, imp, objStr)
}

////AddServant adds servant  for the service with context
func (obj *RedEnvelopeRainGameService) AddServantWithContext(imp impRedEnvelopeRainGameServiceWithContext, objStr string) {
	tars.AddServantWithContext(obj, imp, objStr)
}

//TarsSetTimeout is required by the servant interface. t is the timeout in ms.
func (obj *RedEnvelopeRainGameService) TarsSetTimeout(t int) {
	obj.s.TarsSetTimeout(t)
}

//TarsSetProtocol is required by the servant interface. t is the protocol.
func (obj *RedEnvelopeRainGameService) TarsSetProtocol(p model.Protocol) {
	obj.s.TarsSetProtocol(p)
}

type impRedEnvelopeRainGameService interface {
	ReceiveUserGameData(input ReceiveUserGameDataReq) (output ReceiveRsp, err error)
	ReceiveLiveData(input ReceiveLiveDataReq) (output ReceiveRsp, err error)
}

type impRedEnvelopeRainGameServiceWithContext interface {
	ReceiveUserGameData(ctx context.Context, input ReceiveUserGameDataReq) (output ReceiveRsp, err error)
	ReceiveLiveData(ctx context.Context, input ReceiveLiveDataReq) (output ReceiveRsp, err error)
}

//Dispatch is used to call the user implement of the defined method.
func (obj *RedEnvelopeRainGameService) Dispatch(ctx context.Context, val interface{}, req *requestf.RequestPacket, resp *requestf.ResponsePacket, withContext bool) (err error) {
	input := tools.Int8ToByte(req.SBuffer)
	var output []byte
	funcName := req.SFuncName
	switch funcName {

	case "ReceiveUserGameData":
		inputDefine := ReceiveUserGameDataReq{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res ReceiveRsp
		if withContext == false {
			imp := val.(impRedEnvelopeRainGameService)
			res, err = imp.ReceiveUserGameData(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impRedEnvelopeRainGameServiceWithContext)
			res, err = imp.ReceiveUserGameData(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "ReceiveLiveData":
		inputDefine := ReceiveLiveDataReq{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res ReceiveRsp
		if withContext == false {
			imp := val.(impRedEnvelopeRainGameService)
			res, err = imp.ReceiveLiveData(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impRedEnvelopeRainGameServiceWithContext)
			res, err = imp.ReceiveLiveData(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	default:
		return fmt.Errorf("func mismatch")
	}
	var _status map[string]string
	s, ok := current.GetResponseStatus(ctx)
	if ok && s != nil {
		_status = s
	}
	var _context map[string]string
	c, ok := current.GetResponseContext(ctx)
	if ok && c != nil {
		_context = c
	}
	*resp = requestf.ResponsePacket{
		IVersion:     1,
		CPacketType:  0,
		IRequestId:   req.IRequestId,
		IMessageType: 0,
		IRet:         0,
		SBuffer:      tools.ByteToInt8(output),
		Status:       _status,
		SResultDesc:  "",
		Context:      _context,
	}
	return nil
}

// ReceiveUserGameData is client rpc method as defined
func (obj *RedEnvelopeRainGameService) ReceiveUserGameData(input ReceiveUserGameDataReq, _opt ...map[string]string) (output ReceiveRsp, err error) {
	ctx := context.Background()
	return obj.ReceiveUserGameDataWithContext(ctx, input, _opt...)
}

// ReceiveUserGameDataWithContext is client rpc method as defined
func (obj *RedEnvelopeRainGameService) ReceiveUserGameDataWithContext(ctx context.Context, input ReceiveUserGameDataReq, _opt ...map[string]string) (output ReceiveRsp, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "ReceiveUserGameData", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// ReceiveLiveData is client rpc method as defined
func (obj *RedEnvelopeRainGameService) ReceiveLiveData(input ReceiveLiveDataReq, _opt ...map[string]string) (output ReceiveRsp, err error) {
	ctx := context.Background()
	return obj.ReceiveLiveDataWithContext(ctx, input, _opt...)
}

// ReceiveLiveDataWithContext is client rpc method as defined
func (obj *RedEnvelopeRainGameService) ReceiveLiveDataWithContext(ctx context.Context, input ReceiveLiveDataReq, _opt ...map[string]string) (output ReceiveRsp, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "ReceiveLiveData", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

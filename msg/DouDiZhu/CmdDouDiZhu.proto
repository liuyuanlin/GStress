syntax = "proto2";
package DouDiZhu;

// 子命令码表
//非游戏的


enum enGameFrameID{
	GAME_SUB_CS_USER_DISSOLVE_APPLY = 1;//申请解散桌子
	GAME_SUB_CS_USER_ANSWER_DISSOLVE_APPLY = 2;//应答解散申请
    GAME_SUB_SC_USER_DISSOLVE_APPLY_NOTIFY = 3;//申请解散通知
	GAME_SUB_CS_USER_TABLE_CHAT = 4;//聊天
    GAME_SUB_SC_USER_TABLE_CHAT_NOTIFY = 5;//聊天信息通知
    GAME_SUB_CS_USER_READY_GAME = 6; //准备游戏
    GAME_SUB_SC_USER_READY_GAME_NOTIFY = 7; //准备游戏通知
	GAME_SUB_SC_USER_INFO_CHANGE_NOTIFY = 8; //通知玩家基础信息改变
	GAME_SUB_SC_USER_TABLE_NOTIFY = 9; //桌子信息	
	GAME_SUB_SC_TABLE_DISMISS_NOTIFY = 10; //通知桌子解散
	GAME_SUB_SC_USER_CARD_NOTIFY = 11; //通知玩家牌信息
	GAME_SUB_CS_USER_DISMISS_TABLE = 12;//解散桌子(强制解散)
	GAME_SUB_SC_TABLE_TOTAL_WIN_NOTIFY = 15;//比赛所有输赢汇总通知
	GAME_SUB_CS_TABLE_LAST_WIN_DETAIL = 16;//桌子最上局比赛输赢记录
	GAME_SUB_SC_TABLE_LAST_WIN_DETAIL_NOTIFY = 17;//桌子最上局比赛输赢记录通知	
	GAME_SUB_MINGPAI_CS = 18;
	GAME_SUB_USER_RELOGIN_SC = 19;			//玩家重新登陆消息
	GAME_SUB_CANCEL_TUOGUAN_CS = 20;	    // 取消托管
	GAME_SUB_TUOGUAN_CS = 21; 				//玩家请求被托管
	
}

enum enGameSubID{

	GAME_SUB_SC_GAME_START	= 100;//游戏开始
	GAME_SUB_CS_OPERATE = 101; //玩家操作
    GAME_SUB_SC_OPERATE_RESULT_NOTIFY = 102; //操作结果通知
    GAME_SUB_SC_OPERATE_CODE_NOTIFY = 103;   //操作码通知
	GAME_SUB_SC_GAME_END  = 104;//游戏结束
	
	GAME_SUB_SENDCARD_SC = 105;	//发牌
	GAME_SUB_MINGPAI_SC = 106;	//明牌
	GAME_SUB_SEND_LANDOWNERCARD_SC = 107;//发地主牌
	
	GAME_SUB_TUOGUAN_SC = 108; //玩家被托管
	GAME_SUB_CANCEL_TUOGUAN_SC = 109; //玩家取消托管
	
	GAME_SUB_SYNC_BEILV_SC = 110; //倍率改变了要同步倍率
	
	GAME_SUB_SYNC_CARDHOLDER_SC = 111; //同步记牌器，
	
	
}

enum enShuffleType
{
		enShuffleType_WENROU = 1; //温柔洗
		enShuffleType_BAOLI =2; //暴力洗
}
message CardHoldUnit
{
	required int32 iCardVal = 1;  //1-13，78 79 
	required int32 iCnt = 2; //对应数量
	required bool  bIsLaiZi = 3; //是否是癞子
}

message GAME_SUB_SYNC_CARDHOLDER_SC_MSG
{
	
	
	repeated CardHoldUnit szList = 1 ; //记牌器列表
}

enum enBeiLvType
{
	enBeiLvType_Public =1; //公共
	enBeiLvType_MingPai = 2; //明牌
	enBeiLvType_Bomb = 3; //炸弹
	enBeiLvType_Spring = 4; //春天
	enBeiLvType_BackSpring = 5; //反春
	
	
}

//修改后都会通知客户端
message GAME_SUB_SYNC_BEILV_SC_MSG
{
	message BeiLvUnit
	{
		required int32 iType = 1; //类型
		required int32 iVal = 2; //值
	};
	
	repeated BeiLvUnit szList = 1; //列表
	required string nickName = 2; //昵称
	required bool isLandOwner = 3; //true X2 ,flase X 1
	required int32 iTotalBeiLv = 4;
	required int32 iBeiLvLimit = 5;
	required int32 iBaseScore = 6;
	
}

message GAME_SUB_TUOGUAN_CS_MSG
{

}

message GAME_SUB_CANCEL_TUOGUAN_CS_MSG
{

}

message GAME_SUB_CANCEL_TUOGUAN_SC_MSG
{
	required int32 iSeatId = 1;
}

message GAME_SUB_TUOGUAN_SC_MSG
{
	required int32 iSeatId = 1;
}

//上家牌
message ForwardCardInfo
{
	required int32 iCardType = 1;
	required int32 iSeatId = 2;
	repeated int32 szCardList  = 3;
	repeated int32 szReplaceList = 4;
	
};

message MinPaiInfo
{
	required int32 iSeatId = 1;
	repeated uint32 szCardList = 2;
};

message GAME_SUB_USER_RELOGIN_SC_MSG
{
	required int32 iTableState = 1;
	repeated int32 szHandCardList = 2; //手牌
	optional ForwardCardInfo forwordCardInfo = 3; //上家牌型
	repeated int32 szLandOwnerCardList = 4; //
	optional int32 iLaiZiCard = 5;
	optional bool bIsTuoGuan = 6;
	optional bool bSelfMingPai = 7;
	repeated MinPaiInfo szMinPaiInfoList = 8;
	optional int32 iCurBei = 9; //当前倍率
}

message GAME_SUB_SEND_LANDOWNERCARD_SC_MSG
{
	required int32 iLandownerSeatId = 1; //地主的座位
	repeated uint32 szcardList = 2; //牌3张
	optional uint32 laiZhiCard = 3;	//赖子牌
};

message GAME_SUB_SENDCARD_SC_MSG
{
	repeated uint32 szcardList =1; //牌
	repeated int32  szMinPaiTimes = 2; //明牌倍率列表 
};

message GAME_SUB_MINGPAI_CS_MSG
{
	required int32 iTimes = 1; 				//明牌倍数，<8=>4,<17=>3，发完地主牌是2
};

//广播明牌玩家的牌
message GAME_SUB_MINGPAI_SC_MSG
{
	required int32 iSeatId =1; 			   
	repeated uint32 szcardList =2; 			//牌
	required int32 iTimes =3; 				//明牌倍率
};
 
//扑克操作码
enum enSeat_Operate{
	enSeat_Operate_NONE = 0; 					//不操作
	enSeat_Operate_Ask_LandOwner = 1; 			//叫地主
	enSeat_Operate_Qiang_LandOwner = 2;			//抢地主
	enSeat_Operate_Discard = 3; 				//出牌
	enSeate_Operate_ASK_Score = 4;				//叫分
};	

//GAME_SUB_CS_OPERATE = 101; //玩家操作
message CS_UserOperate{

    required int32 mOperateSeatId = 1; 				//操作座位号
    required int32 mOperateMask = 2;				//操作掩码enSeat_Operate
   	repeated int32 szCardList = 3; 					//牌列表
    optional int32 iCardType = 4;  					//牌型enCardType
	optional bool bAskOrQiangLand = 5;				//叫地主或者抢地主
	optional int32 iTagVal = 6;						//扩展协议，叫分的时候，，0为不叫，1，2，3，为叫分
	repeated int32 szLaiZiReplace = 7;				//癞子要替换的牌
	
};

//GAME_SUB_SC_OPERATE_RESULT_NOTIFY = 102; //操作通知
message SC_OperateResultNotify{

    required int32 mOperateMask = 1;			//操作掩码enSeat_Operate
    required uint32 mOperateSeatId = 2;			//操作的玩家位置
	repeated int32 szCardList = 3; 				//牌列表
    optional int32 iCardType = 4;  				//牌型enCardType
	optional bool bAskOrQiangLand = 5;			//叫地主或者抢地主
	optional int32 iBeiCount =6;			//倍数
	optional int32 iTagVal = 7;				//扩展协议
	repeated int32 szLaiZiReplace = 8;		//癞子要替换的牌
};

message DisCardNotice
{
  repeated int32 szCardList = 1;  		//牌型
};

//GAME_SUB_SC_OPERATE_CODE_NOTIFY = 103;   //操作码通知
message SC_OperateCodeNotify{
    repeated int32 mOperateMask = 1;//操作掩码enSeat_Operate
    required uint32 mWaitSeatId = 2;//等待操作的玩家位置
    required uint32 mOperateTimeOut = 3;//操作超时时间
	repeated DisCardNotice szNoticeList = 4;
};

enum enCardType
{
	enCardType_CT_ERROR 						= 0; //错误类型
	enCardType_CT_SINGLE 						= 1; //单牌类型
	enCardType_CT_DOUBLE					 	= 2; //对牌类型
	enCardType_CT_THREE 						= 3; //三条类型
	enCardType_CT_SINGLE_LINE 					= 4; //单连类型
	enCardType_CT_DOUBLE_LINE					= 5; //对连类型
	enCardType_CT_THREE_LINE 					= 6; //三连类型
	enCardType_CT_THREE_TAKE_ONE 				= 7; //三带一单
	enCardType_CT_THREE_TAKE_ONE_LINE 			= 8; //三带一连牌
	enCardType_CT_THREE_TAKE_TWO 				= 9; //三带一对
	enCardType_CT_THREE_TAKE_TWO_LINE 			= 10; //三带一对连牌
	enCardType_CT_FOUR_TAKE_ONE 				= 11; //四带两单
	enCardType_CT_FOUR_TAKE_ONE_LINE			= 12; //四带两张连牌
	enCardType_CT_FOUR_TAKE_TWO 				= 13; //四带两对
	enCardType_CT_FOUR_TAKE_TWO_LINE			= 14; //四带两对连牌
	enCardType_CT_RUAN_BOMB						= 15; //软炸弹
	enCardType_CT_BOMB_CARD 					= 16; //炸弹类型
	enCardType_CT_LAIZI_BOMB					= 17; //赖子炸弹
	enCardType_CT_MISSILE_CARD 					= 18; //火箭类型
};



enum TableState{

    Table_State_Init = 1;
	Table_State_SendCard = 2; //发牌
	Table_State_EnsureLandOwner = 3; //确定地主
	Table_State_OutCard = 4; //出牌
    Table_State_Game_End = 5;//游戏结束
    Table_State_Dissolve = 6;
    Table_State_Wait_Dissolve = 7;//等待解散投票
}

enum UserState
{
    Mj_User_State_Init = 1;  //初始化
    Mj_User_State_Sit= 2;   //坐下
    Mj_User_State_Ready= 3; //准备
	Mj_User_State_ShowCard = 4; //玩家在发牌中
	Mj_User_State_QiangLandOwner = 5; //玩家在抢地主中
    Mj_User_State_OutCard = 6; //玩家在出牌中
    Mj_User_State_End= 7; // 结束
};

/////////////////////////////////////

//GAME_SUB_CS_USER_DISSOLVE_APPLY = 1;//申请解散桌子
message CS_UserDissolveApply{
    required uint32 mApplySeatId = 1; //申请座位号
}

//GAME_SUB_CS_USER_ANSWER_DISSOLVE_APPLY = 2;//应答解散申请
message CS_UserAnswerDissolveApply{
    required uint32 mAnswerApplySeatId = 1; //应答申请座位号
    required bool mAgree = 2; //是否同意
}

enum TableFinalDecision
{
    Table_Decision_None = 1;
    Table_Decision_Agree = 2;
    Table_Decision_Disagree = 3;
}

//GAME_SUB_SC_USER_DISSOLVE_APPLY_NOTIFY = 3;//申请解散通知
message SC_UserDissolveApplyNotify{
    required uint32 mApplySeatId = 1; //申请座位号
    repeated uint32 mAgreeApplySeatIds = 2; //同意申请座位号
    repeated uint32 mDisagreeApplySeatIds = 3; //不同意申请座位号
    required TableFinalDecision  mFinalDecision = 4; //最终裁决
    required uint32  mApplyTimeOut = 5; //裁决剩余时间
}


//GAME_SUB_CS_USER_TABLE_CHAT = 4;//聊天
message CS_UserTableChatRqst{
    required uint32 mOperateSeatId = 1; //操作座位号
    optional string mTextContent = 2; //文本内容
    optional bytes  mBinaryContent = 3; //二进制内容
    optional uint32 mContentTime = 4;//媒体时长（单位毫秒）
    optional uint32 mImageId = 5; //图片数据id
    optional uint32 mMediaId = 6;//媒体ID
}

//GAME_SUB_SC_USER_TABLE_CHAT_NOTIFY = 5;//聊天信息通知
message SC_UserTableChatNotify{
    required uint32 mOperateSeatId = 1; //操作座位号
    optional string mTextContent = 2; //文本内容
    optional bytes  mBinaryContent = 3; //二进制内容
    optional uint32 mContentTime = 4;//媒体时长（单位毫秒）
    optional uint32 mImageId = 5; //图片数据id
    optional uint32 mMediaId = 6;//媒体ID
}



//GAME_SUB_CS_USER_READY_GAME = 6; //准备游戏
message CS_UserReadyGameRqst{
    required uint32 mReadySeatId = 1; //准备座位id
	repeated uint32 mCards = 2;		//测试使用,自己设定的本局牌型
	optional int32 iLaiZiCard = 3; //癞子牌
	optional bool bIsMingPai = 4; //明牌开始
}

//GAME_SUB_SC_USER_READY_GAME_NOTIFY = 7; //准备游戏通知
message SC_UserReadyGameNotify{
    required uint32 mReadySeatId = 1; //准备座位id
}


//GAME_SUB_SC_USER_INFO_CHANGE_NOTIFY = 8; //通知玩家基础信息改变
message SC_UseBaseInfoNotify{
	required uint32 mSeatId = 1; //座位号（0-3)
	required UserState mUserState = 2; //玩家状态
    required bool mOffLineFlag = 3; //玩家离线标志
    required PlayerBaseInfo mBaseInfo = 4; //玩家基础信息
}

message PlayerBaseInfo{
	required int32 	mUserID = 1;									//用户 ID
	required int32 	mAccid = 2 ;	        						//用户别名id，用于显示
	required string mNickName = 3;	             				//昵称
	required string mFaceID = 4;									//头像索引
	required int32  mSex = 5;									//用户性别(0保密, 1男, 2女)
	required int64 	mUserGold = 6;								//金币数量
	required int32 	mUserDiamond = 7;							//用户钻石
	required string mDescription = 8 [default = ""];            //个人说明
	optional int32 	mVipLevel  = 9;  							//玩家VIP等级
	required int64  mUserPoint = 10;							//用户积分	
	
	required string  mUserIp = 11;							//用户积分		
	required int64  mUserLng = 12;							//用户积分		
	required int64  mUserLat = 13;							//用户积分						
}

message SeatInfo{
    required uint32 mSeatId = 1; //座位号（0-3)
    required  int32  mUserState = 2; //玩家状态UserState
    required bool mOffLineFlag = 3; //玩家离线标志
    optional PlayerBaseInfo mBaseInfo = 4; //玩家基础信息
	required int32 iRemaindCardCount = 5;
	required int32 iTimes = 6;   //倍数
	required int32 iHaveTotalWin = 7; //玩家结算信息

};

message stTableAttribute
{
	required int32 			   GameCurrencyType = 1;		//游戏货币类型（1:钻石，2：金币，3积分）
	required int32 			   PayRoomRateType 	= 2;			//房费支付方式 （0：房主支付，1：AA支付）
	required int32 			   PlanGameCount	=3; 		//开房局数
	required int64			   DiZhu			=4;		//底注
	required int64			   EnterScore       =5;		//进入分数限制
	required int64			   LeaveScore       =6;		//离开分数限制
	required int64			   BeiShuLimit      =7;		//最大倍数限制
	required int32			   ChairCount       =8;		//房间椅子数量
	required int32			   IsAllowEnterAfterStart   =9;		//是否允许开始后加入房间
	required int64			    TableType		  = 10;			//桌子类型（0.成员房 1.好友房）
	required int64			   RoomRate       	=11;		//房费
	required int64			   ServerRate       =12;		//服务费
	required int32			   mGameType       =13;		//游戏玩法（0 经典玩法，1 激情玩法）
	required int32 			   iconfirmLandownerType = 14; //确定地主方式
	required int64				mOwnerUserId = 15;//创建者id
	required string			  TableAdvanceParam =16; 			//桌子高级参数
	required string			   mTableName =17; 						//桌子名字
	required int32 				mRoomId = 18;                         //房间ID
	required int32 				mTableId = 19;                         //KindId
	required int32 				mKindId = 20;                         //桌子id
	required int32 				mClubId = 21;                         //俱乐部id
	required int32			   mIsIpWarn =22; 			//是否相同ip警告
	required int32			   mIsGpsWarn =23; 			//是否相同地点警告

};

message TableInfo{
	required stTableAttribute mTableAttribute = 1;  //桌子高级参数
    required int32 mLandOwnerSeatId = 2; //地主ID，如果==-1就是没有确定地主
    required int32 mTableState = 3;//当前桌子状态 TableState
    repeated SeatInfo szSeatInfos = 4; //桌子座位信息
	required uint32 mGameCount = 5;	//已完成游戏局数
	required int64 mWaitReadyTime = 6; //准备时间
	required int64 mWaitEndTime = 7;//结束时间
	required int64 mAllWaitOperateTime = 8;//操作总时间
	optional bool bShowCardHolder = 9; //是否显示记牌器
	optional int32 mIStuffleCardType = 10;//洗牌方法
	
};


//GAME_SUB_SC_USER_TABLE_NOTIFY = 9; //桌子信息
message SC_TableInfoNotify{
    required TableInfo mTableInfo = 1;//桌子信息
};

//GAME_SUB_SC_TABLE_DISMISS_NOTIFY = 10; //通知桌子解散
//通知座子解散
message SC_UserTableDIsmissNotify{
	required bool bIsGameEndDismiss = 1;
};

//GAME_SUB_CS_USER_DISMISS_TABLE = 12;//解散桌子(强制解散)
//通知座子解散
message CS_UserDismissTable
{
	
};

message PokerUserWinDetail{

    required uint32 mSeatId = 1; //座位id
    required uint32 mUserId = 2; //玩家id
    required int64 mWinScore = 3; //数值
};
//GAME_SUB_SC_TABLE_TOTAL_WIN_NOTIFY = 15;//比赛所有输赢汇总通知
message SC_TAbleTotalWinNotify{
    repeated PokerUserWinDetail mUserWinDetail = 1; //座位id
	optional bytes strVideoData =2 ;
};


//GAME_SUB_SC_GAME_START = 100; //游戏开始
message SC_GameStart{
};


message PokerSettlementDetail{
	required int32  iWinType  = 1; //是地主胜利enWinRes
	required uint32 mSeatId = 2; //座位id
    required int32 mValue = 3; //数值
	optional int32 iTotalBeiLv = 4; //总倍数
	optional int32 iBaseScore = 5; //底分
	
};

message SeatRes{
	required uint32 mSeatId = 1; //座位号（0-3)
	repeated uint32 mHandCards = 2;//手牌
	required int32 mWinScore = 3;
};

//GAME_SUB_SC_GAME_END  = 104;//游戏结束

enum enWinRes
{
	enWinRes_NULL = 0; //没人赢
	enWinRes_LandOwner =1; //地主赢
	enWinRes_Farmer =2;		//农民赢
	enWinRes_Spring = 4;	//春天
	enWinRes_BackSpring = 5; // 反春

};

message SeatFightRes
{
	required int32 iSeatId = 1;
  	required int32 iDiZhu = 2; 		//底注
  	required int32 iBeiCount = 3; 	//倍数
 	required int64 WinScore = 4 ;	//输赢值
};

message SC_GameEnd{

	required int32 mTableState = 1;//当前桌子状态TableState
	required int32 iWin = 2;  // enWinRes 
	repeated SeatRes szSeatRes = 3;//卡牌信息
	repeated SeatFightRes szResultList = 4; //结算信息
};

//录像回放桌位信息
message MVideotapeSeatInfo{
    required uint32 mSeatId = 1; //座位号（0-3)
    required PlayerBaseInfo mBaseInfos = 2; //桌上玩家信息
	repeated uint32 mCards = 3;//玩家的发牌
};

message MingPaiInfo
{
	required int32 iSeatId  =1;
	repeated uint32 szCardList = 2;
	required int32 iTimes = 3;
};

//单局游戏录像回放数据
message MGameVideotapeInfo{
	required stTableAttribute mTableAttribute = 1;  //桌子高级参数
    required uint32 mLandOwnerSeatId = 2; //庄家id
    repeated MVideotapeSeatInfo mVideoSeatInfo = 3; //玩家座位数据
	repeated SC_OperateResultNotify  mOperateRecords= 4; //操作记录信息
	repeated PokerSettlementDetail mTotalSettlementDetail = 5;//所有玩家本局比赛的
	repeated uint32 szLandOwnerCardList = 6 ;   //3张地主牌
	optional int32 iLaiZiCard = 7;				//癞子牌
	repeated MingPaiInfo szMingPaiList = 8;		//明牌列表
	optional int32 iCurTurnVal = 9; //当前局数

};


message MWinDetailInfo{
	required int32 	mSeatId = 1;									//桌位id
	required int64 	mWinScore = 2 ;	        						//输赢值
	
	required int32 	mUserID = 3;									//用户 ID
	required int32 	mAccid = 4 ;	        						//用户别名id，用于显示
	required string mNickName = 5;	             				//昵称
	required string mFaceID = 6;									//头像索引				
};




//GAME_SUB_CS_TABLE_LAST_WIN_DETAIL = 16;//桌子最上局比赛输赢记录
message CS_TableLastWinDetail{

};

//GAME_SUB_SC_TABLE_LAST_WIN_DETAIL_NOTIFY = 17;//桌子最上局比赛输赢记录通知
message SC_TableLastWinDetailNotify{
	repeated MWinDetailInfo mLastWinDetailInfo = 1;
};

